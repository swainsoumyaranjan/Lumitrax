/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function __wbg_keysuploadrequest_free(a: number): void;
export function __wbg_get_keysuploadrequest_id(a: number): number;
export function __wbg_get_keysuploadrequest_body(a: number): number;
export function keysuploadrequest_type(a: number): number;
export function __wbg_keysqueryrequest_free(a: number): void;
export function __wbg_get_keysqueryrequest_id(a: number): number;
export function __wbg_get_keysqueryrequest_body(a: number): number;
export function keysqueryrequest_type(a: number): number;
export function __wbg_keysclaimrequest_free(a: number): void;
export function __wbg_get_keysclaimrequest_id(a: number): number;
export function __wbg_get_keysclaimrequest_body(a: number): number;
export function keysclaimrequest_new(a: number, b: number): number;
export function keysclaimrequest_type(a: number): number;
export function __wbg_todevicerequest_free(a: number): void;
export function __wbg_get_todevicerequest_id(a: number): number;
export function __wbg_get_todevicerequest_event_type(a: number): number;
export function __wbg_get_todevicerequest_txn_id(a: number): number;
export function __wbg_get_todevicerequest_body(a: number): number;
export function todevicerequest_new(a: number, b: number, c: number, d: number): number;
export function todevicerequest_type(a: number): number;
export function __wbg_signatureuploadrequest_free(a: number): void;
export function __wbg_get_signatureuploadrequest_id(a: number): number;
export function __wbg_get_signatureuploadrequest_body(a: number): number;
export function signatureuploadrequest_new(a: number, b: number): number;
export function signatureuploadrequest_type(a: number): number;
export function __wbg_roommessagerequest_free(a: number): void;
export function __wbg_get_roommessagerequest_id(a: number): number;
export function __wbg_get_roommessagerequest_room_id(a: number): number;
export function __wbg_get_roommessagerequest_txn_id(a: number): number;
export function __wbg_get_roommessagerequest_event_type(a: number): number;
export function __wbg_get_roommessagerequest_body(a: number): number;
export function roommessagerequest_new(a: number, b: number, c: number, d: number, e: number): number;
export function roommessagerequest_type(a: number): number;
export function __wbg_keysbackuprequest_free(a: number): void;
export function __wbg_get_keysbackuprequest_id(a: number): number;
export function __wbg_get_keysbackuprequest_body(a: number): number;
export function __wbg_get_keysbackuprequest_version(a: number): number;
export function keysbackuprequest_new(a: number, b: number, c: number): number;
export function keysbackuprequest_type(a: number): number;
export function __wbg_uploadsigningkeysrequest_free(a: number): void;
export function __wbg_get_uploadsigningkeysrequest_body(a: number): number;
export function uploadsigningkeysrequest_new(a: number): number;
export function __wbg_crosssigningbootstraprequests_free(a: number): void;
export function __wbg_get_crosssigningbootstraprequests_uploadKeysRequest(a: number): number;
export function __wbg_get_crosssigningbootstraprequests_uploadSigningKeysRequest(a: number): number;
export function __wbg_get_crosssigningbootstraprequests_uploadSignaturesRequest(a: number): number;
export function __wbg_signatures_free(a: number): void;
export function signatures_new(): number;
export function signatures_addSignature(a: number, b: number, c: number, d: number): number;
export function signatures_getSignature(a: number, b: number, c: number): number;
export function signatures_get(a: number, b: number): number;
export function signatures_clear(a: number): void;
export function signatures_isEmpty(a: number): number;
export function signatures_count(a: number): number;
export function signatures_asJSON(a: number, b: number): void;
export function __wbg_signature_free(a: number): void;
export function signature_ed25519(a: number): number;
export function signature_toBase64(a: number, b: number): void;
export function __wbg_maybesignature_free(a: number): void;
export function maybesignature_isValid(a: number): number;
export function maybesignature_isInvalid(a: number): number;
export function maybesignature_signature(a: number): number;
export function maybesignature_invalidSignatureSource(a: number, b: number): void;
export function __wbg_signatureverification_free(a: number): void;
export function signatureverification_deviceState(a: number): number;
export function signatureverification_userState(a: number): number;
export function signatureverification_trusted(a: number): number;
export function __wbg_roomkeyimportresult_free(a: number): void;
export function __wbg_get_roomkeyimportresult_importedCount(a: number): number;
export function __wbg_get_roomkeyimportresult_totalCount(a: number): number;
export function roomkeyimportresult_keys(a: number): number;
export function __wbg_sas_free(a: number): void;
export function sas_userId(a: number): number;
export function sas_deviceId(a: number): number;
export function sas_otherUserId(a: number): number;
export function sas_otherDeviceId(a: number): number;
export function sas_flowId(a: number, b: number): void;
export function sas_roomId(a: number): number;
export function sas_supportsEmoji(a: number): number;
export function sas_startedFromRequest(a: number): number;
export function sas_isSelfVerification(a: number): number;
export function sas_haveWeConfirmed(a: number): number;
export function sas_hasBeenAccepted(a: number): number;
export function sas_cancelInfo(a: number): number;
export function sas_weStarted(a: number): number;
export function sas_accept(a: number, b: number): void;
export function sas_confirm(a: number): number;
export function sas_cancel(a: number, b: number): void;
export function sas_cancelWithCode(a: number, b: number, c: number, d: number): void;
export function sas_timedOut(a: number): number;
export function sas_canBePresented(a: number): number;
export function sas_isDone(a: number): number;
export function sas_isCancelled(a: number): number;
export function sas_emoji(a: number): number;
export function sas_emojiIndex(a: number): number;
export function sas_decimals(a: number): number;
export function sas_registerChangesCallback(a: number, b: number): void;
export function __wbg_qr_free(a: number): void;
export function qr_state(a: number): number;
export function qr_hasBeenScanned(a: number): number;
export function qr_hasBeenConfirmed(a: number): number;
export function qr_userId(a: number): number;
export function qr_otherUserId(a: number): number;
export function qr_otherDeviceId(a: number): number;
export function qr_weStarted(a: number): number;
export function qr_cancelInfo(a: number): number;
export function qr_isDone(a: number): number;
export function qr_isCancelled(a: number): number;
export function qr_isSelfVerification(a: number): number;
export function qr_reciprocated(a: number): number;
export function qr_flowId(a: number, b: number): void;
export function qr_roomId(a: number): number;
export function qr_toQrCode(a: number, b: number): void;
export function qr_toBytes(a: number, b: number): void;
export function qr_reciprocate(a: number, b: number): void;
export function qr_confirmScanning(a: number, b: number): void;
export function qr_cancel(a: number, b: number): void;
export function qr_cancelWithCode(a: number, b: number, c: number, d: number): void;
export function qr_registerChangesCallback(a: number, b: number): void;
export function __wbg_cancelinfo_free(a: number): void;
export function cancelinfo_reason(a: number): number;
export function cancelinfo_cancelCode(a: number, b: number): void;
export function cancelinfo_cancelledbyUs(a: number): number;
export function __wbg_emoji_free(a: number): void;
export function emoji_symbol(a: number): number;
export function emoji_description(a: number): number;
export function __wbg_qrcode_free(a: number): void;
export function qrcode_renderIntoBuffer(a: number, b: number): void;
export function __wbg_qrcodescan_free(a: number): void;
export function qrcodescan_fromBytes(a: number, b: number): void;
export function __wbg_verificationrequest_free(a: number): void;
export function verificationrequest_request(a: number, b: number, c: number, d: number, e: number): void;
export function verificationrequest_ownUserId(a: number): number;
export function verificationrequest_otherUserId(a: number): number;
export function verificationrequest_otherDeviceId(a: number): number;
export function verificationrequest_roomId(a: number): number;
export function verificationrequest_cancelInfo(a: number): number;
export function verificationrequest_isPassive(a: number): number;
export function verificationrequest_isReady(a: number): number;
export function verificationrequest_timedOut(a: number): number;
export function verificationrequest_timeRemainingMillis(a: number): number;
export function verificationrequest_theirSupportedMethods(a: number, b: number): void;
export function verificationrequest_ourSupportedMethods(a: number, b: number): void;
export function verificationrequest_flowId(a: number, b: number): void;
export function verificationrequest_isSelfVerification(a: number): number;
export function verificationrequest_weStarted(a: number): number;
export function verificationrequest_isDone(a: number): number;
export function verificationrequest_phase(a: number): number;
export function verificationrequest_getVerification(a: number): number;
export function verificationrequest_registerChangesCallback(a: number, b: number): void;
export function verificationrequest_isCancelled(a: number): number;
export function verificationrequest_acceptWithMethods(a: number, b: number, c: number): void;
export function verificationrequest_accept(a: number, b: number): void;
export function verificationrequest_cancel(a: number, b: number): void;
export function verificationrequest_startSas(a: number): number;
export function verificationrequest_generateQrCode(a: number): number;
export function verificationrequest_scanQrCode(a: number, b: number): number;
export function keysuploadrequest_new(a: number, b: number): number;
export function keysqueryrequest_new(a: number, b: number): number;
export function __wbg_attachment_free(a: number): void;
export function attachment_encrypt(a: number, b: number, c: number): void;
export function attachment_decrypt(a: number, b: number): void;
export function __wbg_encryptedattachment_free(a: number): void;
export function encryptedattachment_new(a: number, b: number, c: number, d: number, e: number): void;
export function encryptedattachment_encryptedData(a: number, b: number): void;
export function encryptedattachment_mediaEncryptionInfo(a: number, b: number): void;
export function encryptedattachment_hasMediaEncryptionInfoBeenConsumed(a: number): number;
export function __wbg_crosssigningstatus_free(a: number): void;
export function crosssigningstatus_hasMaster(a: number): number;
export function crosssigningstatus_hasSelfSigning(a: number): number;
export function crosssigningstatus_hasUserSigning(a: number): number;
export function __wbg_inboundgroupsession_free(a: number): void;
export function inboundgroupsession_roomId(a: number): number;
export function inboundgroupsession_senderKey(a: number): number;
export function inboundgroupsession_sessionId(a: number, b: number): void;
export function inboundgroupsession_hasBeenImported(a: number): number;
export function __wbg_backupdecryptionkey_free(a: number): void;
export function __wbg_megolmv1backupkey_free(a: number): void;
export function megolmv1backupkey_publicKeyBase64(a: number): number;
export function megolmv1backupkey_algorithm(a: number): number;
export function backupdecryptionkey_createRandomKey(): number;
export function backupdecryptionkey_fromBase64(a: number, b: number, c: number): void;
export function backupdecryptionkey_toBase64(a: number): number;
export function backupdecryptionkey_megolmV1PublicKey(a: number): number;
export function backupdecryptionkey_decryptV1(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): void;
export function __wbg_roomkeycounts_free(a: number): void;
export function __wbg_get_roomkeycounts_total(a: number): number;
export function __wbg_set_roomkeycounts_total(a: number, b: number): void;
export function __wbg_get_roomkeycounts_backedUp(a: number): number;
export function __wbg_set_roomkeycounts_backedUp(a: number, b: number): void;
export function __wbg_backupkeys_free(a: number): void;
export function __wbg_get_backupkeys_decryptionKey(a: number): number;
export function __wbg_set_backupkeys_decryptionKey(a: number, b: number): void;
export function __wbg_get_backupkeys_backupVersion(a: number, b: number): void;
export function __wbg_set_backupkeys_backupVersion(a: number, b: number, c: number): void;
export function backupkeys_decryptionKeyBase64(a: number): number;
export function __wbg_encryptionsettings_free(a: number): void;
export function __wbg_get_encryptionsettings_algorithm(a: number): number;
export function __wbg_set_encryptionsettings_algorithm(a: number, b: number): void;
export function __wbg_get_encryptionsettings_rotationPeriod(a: number): number;
export function __wbg_set_encryptionsettings_rotationPeriod(a: number, b: number): void;
export function __wbg_get_encryptionsettings_rotationPeriodMessages(a: number): number;
export function __wbg_set_encryptionsettings_rotationPeriodMessages(a: number, b: number): void;
export function __wbg_get_encryptionsettings_historyVisibility(a: number): number;
export function __wbg_set_encryptionsettings_historyVisibility(a: number, b: number): void;
export function __wbg_get_encryptionsettings_onlyAllowTrustedDevices(a: number): number;
export function __wbg_set_encryptionsettings_onlyAllowTrustedDevices(a: number, b: number): void;
export function encryptionsettings_new(): number;
export function __wbg_shieldstate_free(a: number): void;
export function __wbg_get_shieldstate_color(a: number): number;
export function __wbg_set_shieldstate_color(a: number, b: number): void;
export function shieldstate_message(a: number, b: number): void;
export function __wbg_megolmdecryptionerror_free(a: number): void;
export function __wbg_get_megolmdecryptionerror_code(a: number): number;
export function __wbg_get_megolmdecryptionerror_description(a: number): number;
export function __wbg_get_megolmdecryptionerror_maybe_withheld(a: number): number;
export function __wbg_userid_free(a: number): void;
export function userid_new(a: number, b: number, c: number): void;
export function userid_localpart(a: number, b: number): void;
export function userid_serverName(a: number): number;
export function userid_isHistorical(a: number): number;
export function userid_toString(a: number, b: number): void;
export function __wbg_deviceid_free(a: number): void;
export function deviceid_new(a: number, b: number): number;
export function deviceid_toString(a: number, b: number): void;
export function __wbg_devicekeyid_free(a: number): void;
export function devicekeyid_new(a: number, b: number, c: number): void;
export function devicekeyid_algorithm(a: number): number;
export function devicekeyid_deviceId(a: number): number;
export function devicekeyid_toString(a: number, b: number): void;
export function __wbg_devicekeyalgorithm_free(a: number): void;
export function devicekeyalgorithm_name(a: number): number;
export function devicekeyalgorithm_toString(a: number, b: number): void;
export function __wbg_roomid_free(a: number): void;
export function roomid_new(a: number, b: number, c: number): void;
export function roomid_toString(a: number, b: number): void;
export function __wbg_servername_free(a: number): void;
export function servername_new(a: number, b: number, c: number): void;
export function servername_host(a: number, b: number): void;
export function servername_port(a: number): number;
export function servername_isIpLiteral(a: number): number;
export function __wbg_eventid_free(a: number): void;
export function eventid_new(a: number, b: number, c: number): void;
export function eventid_localpart(a: number, b: number): void;
export function eventid_serverName(a: number): number;
export function eventid_toString(a: number, b: number): void;
export function __wbg_device_free(a: number): void;
export function device_requestVerification(a: number, b: number, c: number): void;
export function device_isVerified(a: number): number;
export function device_isCrossSigningTrusted(a: number): number;
export function device_isCrossSignedByOwner(a: number): number;
export function device_setLocalTrust(a: number, b: number): number;
export function device_userId(a: number): number;
export function device_deviceId(a: number): number;
export function device_displayName(a: number, b: number): void;
export function device_getKey(a: number, b: number, c: number): void;
export function device_curve25519Key(a: number): number;
export function device_ed25519Key(a: number): number;
export function device_keys(a: number): number;
export function device_algorithms(a: number): number;
export function device_signatures(a: number): number;
export function device_localTrustState(a: number): number;
export function device_isLocallyTrusted(a: number): number;
export function device_isBlacklisted(a: number): number;
export function device_isDeleted(a: number): number;
export function device_firstTimeSeen(a: number): number;
export function device_verify(a: number): number;
export function __wbg_userdevices_free(a: number): void;
export function userdevices_get(a: number, b: number): number;
export function userdevices_isAnyVerified(a: number): number;
export function userdevices_keys(a: number): number;
export function userdevices_devices(a: number): number;
export function __wbg_ownuseridentity_free(a: number): void;
export function ownuseridentity_isVerified(a: number): number;
export function ownuseridentity_verify(a: number): number;
export function ownuseridentity_requestVerification(a: number, b: number, c: number): void;
export function ownuseridentity_trustsOurOwnDevice(a: number): number;
export function ownuseridentity_masterKey(a: number, b: number): void;
export function ownuseridentity_selfSigningKey(a: number, b: number): void;
export function ownuseridentity_userSigningKey(a: number, b: number): void;
export function __wbg_useridentity_free(a: number): void;
export function useridentity_isVerified(a: number): number;
export function useridentity_verify(a: number): number;
export function useridentity_requestVerification(a: number, b: number, c: number, d: number, e: number): void;
export function useridentity_verificationRequestContent(a: number, b: number, c: number): void;
export function useridentity_masterKey(a: number, b: number): void;
export function useridentity_selfSigningKey(a: number, b: number): void;
export function __wbg_decryptedroomevent_free(a: number): void;
export function __wbg_get_decryptedroomevent_event(a: number): number;
export function decryptedroomevent_sender(a: number): number;
export function decryptedroomevent_senderDevice(a: number): number;
export function decryptedroomevent_senderCurve25519Key(a: number): number;
export function decryptedroomevent_senderClaimedEd25519Key(a: number): number;
export function decryptedroomevent_forwardingCurve25519KeyChain(a: number): number;
export function decryptedroomevent_shieldState(a: number, b: number): number;
export function __wbg_encryptioninfo_free(a: number): void;
export function encryptioninfo_sender(a: number): number;
export function encryptioninfo_senderDevice(a: number): number;
export function encryptioninfo_senderCurve25519Key(a: number): number;
export function encryptioninfo_senderClaimedEd25519Key(a: number): number;
export function encryptioninfo_shieldState(a: number, b: number): number;
export function __wbg_devicelists_free(a: number): void;
export function devicelists_new(a: number, b: number, c: number): void;
export function devicelists_isEmpty(a: number): number;
export function devicelists_changed(a: number): number;
export function devicelists_left(a: number): number;
export function __wbg_tracing_free(a: number): void;
export function tracing_isAvailable(): number;
export function tracing_new(a: number, b: number): void;
export function tracing_set_minLevel(a: number, b: number, c: number): void;
export function tracing_turnOn(a: number, b: number): void;
export function tracing_turnOff(a: number, b: number): void;
export function __wbg_versions_free(a: number): void;
export function __wbg_get_versions_vodozemac(a: number): number;
export function __wbg_get_versions_matrix_sdk_crypto(a: number): number;
export function __wbg_get_versions_git_sha(a: number): number;
export function __wbg_get_versions_git_description(a: number): number;
export function getVersions(): number;
export function start(): void;
export function __wbg_migration_free(a: number): void;
export function __wbg_basemigrationdata_free(a: number): void;
export function __wbg_get_basemigrationdata_userId(a: number): number;
export function __wbg_set_basemigrationdata_userId(a: number, b: number): void;
export function __wbg_get_basemigrationdata_deviceId(a: number): number;
export function __wbg_set_basemigrationdata_deviceId(a: number, b: number): void;
export function __wbg_get_basemigrationdata_pickledAccount(a: number, b: number): void;
export function __wbg_set_basemigrationdata_pickledAccount(a: number, b: number, c: number): void;
export function __wbg_get_basemigrationdata_backupVersion(a: number, b: number): void;
export function __wbg_set_basemigrationdata_backupVersion(a: number, b: number, c: number): void;
export function __wbg_get_basemigrationdata_backupRecoveryKey(a: number, b: number): void;
export function __wbg_set_basemigrationdata_backupRecoveryKey(a: number, b: number, c: number): void;
export function __wbg_get_basemigrationdata_privateCrossSigningMasterKey(a: number, b: number): void;
export function __wbg_set_basemigrationdata_privateCrossSigningMasterKey(a: number, b: number, c: number): void;
export function __wbg_get_basemigrationdata_privateCrossSigningSelfSigningKey(a: number, b: number): void;
export function __wbg_set_basemigrationdata_privateCrossSigningSelfSigningKey(a: number, b: number, c: number): void;
export function __wbg_get_basemigrationdata_privateCrossSigningUserSigningKey(a: number, b: number): void;
export function __wbg_set_basemigrationdata_privateCrossSigningUserSigningKey(a: number, b: number, c: number): void;
export function basemigrationdata_new(): number;
export function migration_migrateBaseData(a: number, b: number, c: number): number;
export function __wbg_pickledsession_free(a: number): void;
export function __wbg_get_pickledsession_pickle(a: number, b: number): void;
export function __wbg_set_pickledsession_pickle(a: number, b: number, c: number): void;
export function __wbg_get_pickledsession_senderKey(a: number, b: number): void;
export function __wbg_set_pickledsession_senderKey(a: number, b: number, c: number): void;
export function __wbg_get_pickledsession_createdUsingFallbackKey(a: number): number;
export function __wbg_set_pickledsession_createdUsingFallbackKey(a: number, b: number): void;
export function __wbg_get_pickledsession_creationTime(a: number): number;
export function __wbg_set_pickledsession_creationTime(a: number, b: number): void;
export function __wbg_get_pickledsession_lastUseTime(a: number): number;
export function __wbg_set_pickledsession_lastUseTime(a: number, b: number): void;
export function pickledsession_new(): number;
export function migration_migrateOlmSessions(a: number, b: number, c: number): number;
export function __wbg_pickledinboundgroupsession_free(a: number): void;
export function __wbg_get_pickledinboundgroupsession_pickle(a: number, b: number): void;
export function __wbg_set_pickledinboundgroupsession_pickle(a: number, b: number, c: number): void;
export function __wbg_get_pickledinboundgroupsession_senderKey(a: number, b: number): void;
export function __wbg_set_pickledinboundgroupsession_senderKey(a: number, b: number, c: number): void;
export function __wbg_get_pickledinboundgroupsession_senderSigningKey(a: number, b: number): void;
export function __wbg_set_pickledinboundgroupsession_senderSigningKey(a: number, b: number, c: number): void;
export function __wbg_get_pickledinboundgroupsession_roomId(a: number): number;
export function __wbg_set_pickledinboundgroupsession_roomId(a: number, b: number): void;
export function __wbg_get_pickledinboundgroupsession_imported(a: number): number;
export function __wbg_set_pickledinboundgroupsession_imported(a: number, b: number): void;
export function __wbg_get_pickledinboundgroupsession_backedUp(a: number): number;
export function __wbg_set_pickledinboundgroupsession_backedUp(a: number, b: number): void;
export function pickledinboundgroupsession_new(): number;
export function migration_migrateMegolmSessions(a: number, b: number, c: number): number;
export function __wbg_olmmachine_free(a: number): void;
export function olmmachine_new(a: number): void;
export function olmmachine_initialize(a: number, b: number, c: number, d: number, e: number, f: number): number;
export function olmmachine_init_from_store(a: number, b: number, c: number): number;
export function olmmachine_userId(a: number): number;
export function olmmachine_deviceId(a: number): number;
export function olmmachine_identityKeys(a: number): number;
export function olmmachine_displayName(a: number): number;
export function olmmachine_roomKeyRequestsEnabled(a: number): number;
export function olmmachine_set_roomKeyRequestsEnabled(a: number, b: number): void;
export function olmmachine_roomKeyForwardingEnabled(a: number): number;
export function olmmachine_set_roomKeyForwardingEnabled(a: number, b: number): void;
export function olmmachine_trackedUsers(a: number, b: number): void;
export function olmmachine_updateTrackedUsers(a: number, b: number, c: number): void;
export function olmmachine_receiveSyncChanges(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function olmmachine_outgoingRequests(a: number): number;
export function olmmachine_markRequestAsSent(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function olmmachine_encryptRoomEvent(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function olmmachine_decryptRoomEvent(a: number, b: number, c: number, d: number, e: number): void;
export function olmmachine_getRoomEventEncryptionInfo(a: number, b: number, c: number, d: number, e: number): void;
export function olmmachine_crossSigningStatus(a: number): number;
export function olmmachine_exportCrossSigningKeys(a: number): number;
export function olmmachine_importCrossSigningKeys(a: number, b: number, c: number, d: number, e: number, f: number, g: number): number;
export function olmmachine_bootstrapCrossSigning(a: number, b: number): number;
export function olmmachine_getIdentity(a: number, b: number): number;
export function olmmachine_sign(a: number, b: number, c: number): number;
export function olmmachine_invalidateGroupSession(a: number, b: number): number;
export function olmmachine_shareRoomKey(a: number, b: number, c: number, d: number, e: number): void;
export function olmmachine_queryKeysForUsers(a: number, b: number, c: number): void;
export function olmmachine_getMissingSessions(a: number, b: number, c: number): void;
export function olmmachine_getUserDevices(a: number, b: number, c: number, d: number): number;
export function olmmachine_getDevice(a: number, b: number, c: number, d: number, e: number): number;
export function olmmachine_getVerification(a: number, b: number, c: number, d: number, e: number): void;
export function olmmachine_getVerificationRequest(a: number, b: number, c: number, d: number): number;
export function olmmachine_getVerificationRequests(a: number, b: number): number;
export function olmmachine_receiveVerificationEvent(a: number, b: number, c: number, d: number, e: number): void;
export function olmmachine_exportRoomKeys(a: number, b: number): number;
export function olmmachine_importRoomKeys(a: number, b: number, c: number, d: number, e: number): void;
export function olmmachine_importExportedRoomKeys(a: number, b: number, c: number, d: number, e: number): void;
export function olmmachine_importBackedUpRoomKeys(a: number, b: number, c: number, d: number): void;
export function olmmachine_saveBackupDecryptionKey(a: number, b: number, c: number, d: number): number;
export function olmmachine_getBackupKeys(a: number): number;
export function olmmachine_verifyBackup(a: number, b: number, c: number): void;
export function olmmachine_enableBackupV1(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function olmmachine_isBackupEnabled(a: number): number;
export function olmmachine_disableBackup(a: number): number;
export function olmmachine_backupRoomKeys(a: number): number;
export function olmmachine_roomKeyCounts(a: number): number;
export function olmmachine_encryptExportedRoomKeys(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function olmmachine_decryptExportedRoomKeys(a: number, b: number, c: number, d: number, e: number): void;
export function olmmachine_registerRoomKeyUpdatedCallback(a: number, b: number): number;
export function olmmachine_registerUserIdentityUpdatedCallback(a: number, b: number): number;
export function olmmachine_registerReceiveSecretCallback(a: number, b: number): number;
export function olmmachine_getSecretsFromInbox(a: number, b: number, c: number): number;
export function olmmachine_deleteSecretsFromInbox(a: number, b: number, c: number): number;
export function olmmachine_requestMissingSecretsIfNeeded(a: number): number;
export function olmmachine_close(a: number): void;
export function __wbg_storehandle_free(a: number): void;
export function storehandle_open(a: number, b: number, c: number, d: number): number;
export function __wbg_crosssigningkeyexport_free(a: number): void;
export function crosssigningkeyexport_masterKey(a: number, b: number): void;
export function crosssigningkeyexport_self_signing_key(a: number, b: number): void;
export function crosssigningkeyexport_userSigningKey(a: number, b: number): void;
export function __wbg_roomkeyinfo_free(a: number): void;
export function roomkeyinfo_algorithm(a: number): number;
export function roomkeyinfo_roomId(a: number): number;
export function roomkeyinfo_senderKey(a: number): number;
export function roomkeyinfo_sessionId(a: number, b: number): void;
export function __wbg_ed25519publickey_free(a: number): void;
export function ed25519publickey_length(a: number): number;
export function ed25519publickey_toBase64(a: number, b: number): void;
export function __wbg_ed25519signature_free(a: number): void;
export function ed25519signature_new(a: number, b: number, c: number): void;
export function ed25519signature_toBase64(a: number, b: number): void;
export function __wbg_curve25519publickey_free(a: number): void;
export function curve25519publickey_length(a: number): number;
export function curve25519publickey_toBase64(a: number, b: number): void;
export function __wbg_identitykeys_free(a: number): void;
export function __wbg_get_identitykeys_ed25519(a: number): number;
export function __wbg_set_identitykeys_ed25519(a: number, b: number): void;
export function __wbg_get_identitykeys_curve25519(a: number): number;
export function __wbg_set_identitykeys_curve25519(a: number, b: number): void;
export function __wbg_devicekey_free(a: number): void;
export function devicekey_name(a: number): number;
export function devicekey_curve25519(a: number): number;
export function devicekey_ed25519(a: number): number;
export function devicekey_unknown(a: number, b: number): void;
export function devicekey_toBase64(a: number, b: number): void;
export function __wbindgen_malloc(a: number, b: number): number;
export function __wbindgen_realloc(a: number, b: number, c: number, d: number): number;
export const __wbindgen_export_2: WebAssembly.Table;
export function __wbindgen_add_to_stack_pointer(a: number): number;
export function wasm_bindgen__convert__closures__invoke1_mut__h6308c5a5ce5d5746(a: number, b: number, c: number, d: number): void;
export function _dyn_core__ops__function__Fn_____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__hd1c828842aa3fe05(a: number, b: number): void;
export function _dyn_core__ops__function__Fn__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h556a138b5ba3d109(a: number, b: number, c: number): void;
export function wasm_bindgen__convert__closures__invoke1_mut__hdb782ba9c761e475(a: number, b: number, c: number): void;
export function _dyn_core__ops__function__FnMut_____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__ha501a1f7047b6a5c(a: number, b: number): void;
export function __wbindgen_free(a: number, b: number, c: number): void;
export function __wbindgen_exn_store(a: number): void;
export function wasm_bindgen__convert__closures__invoke2_mut__h1f1a4cd1042c7e6a(a: number, b: number, c: number, d: number): void;
export function __wbindgen_start(): void;
