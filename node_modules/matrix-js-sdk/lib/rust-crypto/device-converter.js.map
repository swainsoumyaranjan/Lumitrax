{"version":3,"file":"device-converter.js","names":["RustSdkCryptoJs","_interopRequireWildcard","require","_device","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","prototype","hasOwnProperty","call","i","set","rustDeviceToJsDevice","device","userId","keys","Map","keyId","key","entries","toString","toBase64","verified","DeviceVerification","Unverified","isBlacklisted","Blocked","isVerified","Verified","signatures","mayBeSignatureMap","convertedSignatures","value","isValid","signature","rustAlgorithms","algorithms","Set","forEach","algorithm","EncryptionAlgorithm","MegolmV1AesSha2","add","OlmV1Curve25519AesSha2","Device","deviceId","Array","from","displayName","deviceKeysToDeviceMap","deviceKeys","map","downloadDeviceToJsDevice","_device$unsigned","unsigned","device_display_name","device_id","user_id"],"sources":["../../src/rust-crypto/device-converter.ts"],"sourcesContent":["/*\nCopyright 2023 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport * as RustSdkCryptoJs from \"@matrix-org/matrix-sdk-crypto-wasm\";\n\nimport { Device, DeviceVerification } from \"../models/device\";\nimport { DeviceKeys } from \"../client\";\n\n/**\n * Convert a {@link RustSdkCryptoJs.Device} to a {@link Device}\n * @param device - Rust Sdk device\n * @param userId - owner of the device\n *\n * @internal\n */\nexport function rustDeviceToJsDevice(device: RustSdkCryptoJs.Device, userId: RustSdkCryptoJs.UserId): Device {\n    // Copy rust device keys to Device.keys\n    const keys = new Map<string, string>();\n    for (const [keyId, key] of device.keys.entries()) {\n        keys.set(keyId.toString(), key.toBase64());\n    }\n\n    // Compute verified from device state\n    let verified: DeviceVerification = DeviceVerification.Unverified;\n    if (device.isBlacklisted()) {\n        verified = DeviceVerification.Blocked;\n    } else if (device.isVerified()) {\n        verified = DeviceVerification.Verified;\n    }\n\n    // Convert rust signatures to Device.signatures\n    const signatures = new Map<string, Map<string, string>>();\n    const mayBeSignatureMap: Map<string, RustSdkCryptoJs.MaybeSignature> | undefined = device.signatures.get(userId);\n    if (mayBeSignatureMap) {\n        const convertedSignatures = new Map<string, string>();\n        // Convert maybeSignatures map to a Map<string, string>\n        for (const [key, value] of mayBeSignatureMap.entries()) {\n            if (value.isValid() && value.signature) {\n                convertedSignatures.set(key, value.signature.toBase64());\n            }\n        }\n\n        signatures.set(userId.toString(), convertedSignatures);\n    }\n\n    // Convert rust algorithms to algorithms\n    const rustAlgorithms: RustSdkCryptoJs.EncryptionAlgorithm[] = device.algorithms;\n    // Use set to ensure that algorithms are not duplicated\n    const algorithms = new Set<string>();\n    rustAlgorithms.forEach((algorithm) => {\n        switch (algorithm) {\n            case RustSdkCryptoJs.EncryptionAlgorithm.MegolmV1AesSha2:\n                algorithms.add(\"m.megolm.v1.aes-sha2\");\n                break;\n            case RustSdkCryptoJs.EncryptionAlgorithm.OlmV1Curve25519AesSha2:\n            default:\n                algorithms.add(\"m.olm.v1.curve25519-aes-sha2\");\n                break;\n        }\n    });\n\n    return new Device({\n        deviceId: device.deviceId.toString(),\n        userId: userId.toString(),\n        keys,\n        algorithms: Array.from(algorithms),\n        verified,\n        signatures,\n        displayName: device.displayName,\n    });\n}\n\n/**\n * Convert {@link DeviceKeys}  from `/keys/query` request to a `Map<string, Device>`\n * @param deviceKeys - Device keys object to convert\n *\n * @internal\n */\nexport function deviceKeysToDeviceMap(deviceKeys: DeviceKeys): Map<string, Device> {\n    return new Map(\n        Object.entries(deviceKeys).map(([deviceId, device]) => [deviceId, downloadDeviceToJsDevice(device)]),\n    );\n}\n\n// Device from `/keys/query` request\ntype QueryDevice = DeviceKeys[keyof DeviceKeys];\n\n/**\n * Convert `/keys/query` {@link QueryDevice} device to {@link Device}\n * @param device - Device from `/keys/query` request\n *\n * @internal\n */\nexport function downloadDeviceToJsDevice(device: QueryDevice): Device {\n    const keys = new Map(Object.entries(device.keys));\n    const displayName = device.unsigned?.device_display_name;\n\n    const signatures = new Map<string, Map<string, string>>();\n    if (device.signatures) {\n        for (const userId in device.signatures) {\n            signatures.set(userId, new Map(Object.entries(device.signatures[userId])));\n        }\n    }\n\n    return new Device({\n        deviceId: device.device_id,\n        userId: device.user_id,\n        keys,\n        algorithms: device.algorithms,\n        verified: DeviceVerification.Unverified,\n        signatures,\n        displayName,\n    });\n}\n"],"mappings":"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"}