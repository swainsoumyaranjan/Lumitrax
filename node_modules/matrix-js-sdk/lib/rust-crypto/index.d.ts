import { RustCrypto } from "./rust-crypto";
import { IHttpOpts, MatrixHttpApi } from "../http-api";
import { ServerSideSecretStorage } from "../secret-storage";
import { ICryptoCallbacks } from "../crypto";
import { Logger } from "../logger";
/**
 * Create a new `RustCrypto` implementation
 *
 * @param logger - A `Logger` instance that will be used for debug output.
 * @param http - Low-level HTTP interface: used to make outgoing requests required by the rust SDK.
 *     We expect it to set the access token, etc.
 * @param userId - The local user's User ID.
 * @param deviceId - The local user's Device ID.
 * @param secretStorage - Interface to server-side secret storage.
 * @param cryptoCallbacks - Crypto callbacks provided by the application
 * @param storePrefix - the prefix to use on the indexeddbs created by rust-crypto.
 *     If `null`, a memory store will be used.
 * @param storePassphrase - a passphrase to use to encrypt the indexeddbs created by rust-crypto.
 *     Ignored if `storePrefix` is null. If this is `undefined` (and `storePrefix` is not null), the indexeddbs
 *     will be unencrypted.
 *
 * @internal
 */
export declare function initRustCrypto(logger: Logger, http: MatrixHttpApi<IHttpOpts & {
    onlyData: true;
}>, userId: string, deviceId: string, secretStorage: ServerSideSecretStorage, cryptoCallbacks: ICryptoCallbacks, storePrefix: string | null, storePassphrase: string | undefined): Promise<RustCrypto>;
//# sourceMappingURL=index.d.ts.map