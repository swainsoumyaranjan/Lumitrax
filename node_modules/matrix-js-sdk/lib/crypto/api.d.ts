import { DeviceInfo } from "./deviceinfo";
export { CrossSigningKey } from "../crypto-api";
export type { GeneratedSecretStorageKey as IRecoveryKey, CreateSecretStorageOpts as ICreateSecretStorageOpts, } from "../crypto-api";
export type { ImportRoomKeyProgressData as IImportOpts, ImportRoomKeysOpts as IImportRoomKeysOpts, } from "../crypto-api";
export type { AddSecretStorageKeyOpts as IAddSecretStorageKeyOpts, PassphraseInfo as IPassphraseInfo, SecretStorageKeyDescription as ISecretStorageKeyInfo, } from "../secret-storage";
export interface IEncryptedEventInfo {
    /**
     * whether the event is encrypted (if not encrypted, some of the other properties may not be set)
     */
    encrypted: boolean;
    /**
     * the sender's key
     */
    senderKey: string;
    /**
     * the algorithm used to encrypt the event
     */
    algorithm: string;
    /**
     * whether we can be sure that the owner of the senderKey sent the event
     */
    authenticated: boolean;
    /**
     * the sender's device information, if available
     */
    sender?: DeviceInfo;
    /**
     * if the event's ed25519 and curve25519 keys don't match (only meaningful if `sender` is set)
     */
    mismatchedSender: boolean;
}
//# sourceMappingURL=api.d.ts.map