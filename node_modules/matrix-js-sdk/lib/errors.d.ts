export declare enum InvalidStoreState {
    ToggledLazyLoading = 0
}
export declare class InvalidStoreError extends Error {
    readonly reason: InvalidStoreState;
    readonly value: any;
    static TOGGLED_LAZY_LOADING: InvalidStoreState;
    constructor(reason: InvalidStoreState, value: any);
}
export declare enum InvalidCryptoStoreState {
    TooNew = "TOO_NEW"
}
export declare class InvalidCryptoStoreError extends Error {
    readonly reason: InvalidCryptoStoreState;
    static TOO_NEW: InvalidCryptoStoreState;
    constructor(reason: InvalidCryptoStoreState);
}
export declare class KeySignatureUploadError extends Error {
    readonly value: any;
    constructor(message: string, value: any);
}
/**
 * It is invalid to call most methods once {@link MatrixClient#stopClient} has been called.
 *
 * This error will be thrown if you attempt to do so.
 *
 * {@link MatrixClient#stopClient} itself is an exception to this: it may safely be called multiple times on the same
 * instance.
 */
export declare class ClientStoppedError extends Error {
    constructor();
}
//# sourceMappingURL=errors.d.ts.map