{"version":3,"file":"auth.js","names":["_NamespacedValue","require","DELEGATED_OIDC_COMPATIBILITY","exports","UnstableValue","IdentityProviderBrand","SSOAction"],"sources":["../../src/@types/auth.ts"],"sourcesContent":["/*\nCopyright 2022 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { UnstableValue } from \"../NamespacedValue\";\nimport { IClientWellKnown } from \"../client\";\n\n// disable lint because these are wire responses\n/* eslint-disable camelcase */\n\n/**\n * Represents a response to the CSAPI `/refresh` endpoint.\n */\nexport interface IRefreshTokenResponse {\n    access_token: string;\n    expires_in_ms: number;\n    refresh_token: string;\n}\n\n/* eslint-enable camelcase */\n\n/**\n * Response to GET login flows as per https://spec.matrix.org/v1.3/client-server-api/#get_matrixclientv3login\n */\nexport interface ILoginFlowsResponse {\n    flows: LoginFlow[];\n}\n\nexport type LoginFlow = ISSOFlow | IPasswordFlow | ILoginFlow;\n\nexport interface ILoginFlow {\n    type: string;\n}\n\nexport interface IPasswordFlow extends ILoginFlow {\n    type: \"m.login.password\";\n}\n\nexport const DELEGATED_OIDC_COMPATIBILITY = new UnstableValue(\n    \"delegated_oidc_compatibility\",\n    \"org.matrix.msc3824.delegated_oidc_compatibility\",\n);\n\n/**\n * Representation of SSO flow as per https://spec.matrix.org/v1.3/client-server-api/#client-login-via-sso\n */\nexport interface ISSOFlow extends ILoginFlow {\n    type: \"m.login.sso\" | \"m.login.cas\";\n    // eslint-disable-next-line camelcase\n    identity_providers?: IIdentityProvider[];\n    [DELEGATED_OIDC_COMPATIBILITY.name]?: boolean;\n    [DELEGATED_OIDC_COMPATIBILITY.altName]?: boolean;\n}\n\nexport enum IdentityProviderBrand {\n    Gitlab = \"gitlab\",\n    Github = \"github\",\n    Apple = \"apple\",\n    Google = \"google\",\n    Facebook = \"facebook\",\n    Twitter = \"twitter\",\n}\n\nexport interface IIdentityProvider {\n    id: string;\n    name: string;\n    icon?: string;\n    brand?: IdentityProviderBrand | string;\n}\n\nexport enum SSOAction {\n    /** The user intends to login to an existing account */\n    LOGIN = \"login\",\n\n    /** The user intends to register for a new account */\n    REGISTER = \"register\",\n}\n\n/**\n * A client can identify a user using their Matrix ID.\n * This can either be the fully qualified Matrix user ID, or just the localpart of the user ID.\n * @see https://spec.matrix.org/v1.7/client-server-api/#matrix-user-id\n */\ntype UserLoginIdentifier = {\n    type: \"m.id.user\";\n    user: string;\n};\n\n/**\n * A client can identify a user using a 3PID associated with the user’s account on the homeserver,\n * where the 3PID was previously associated using the /account/3pid API.\n * See the 3PID Types Appendix for a list of Third-party ID media.\n * @see https://spec.matrix.org/v1.7/client-server-api/#third-party-id\n */\ntype ThirdPartyLoginIdentifier = {\n    type: \"m.id.thirdparty\";\n    medium: string;\n    address: string;\n};\n\n/**\n * A client can identify a user using a phone number associated with the user’s account,\n * where the phone number was previously associated using the /account/3pid API.\n * The phone number can be passed in as entered by the user; the homeserver will be responsible for canonicalising it.\n * If the client wishes to canonicalise the phone number,\n * then it can use the m.id.thirdparty identifier type with a medium of msisdn instead.\n *\n * The country is the two-letter uppercase ISO-3166-1 alpha-2 country code that the number in phone should be parsed as if it were dialled from.\n *\n * @see https://spec.matrix.org/v1.7/client-server-api/#phone-number\n */\ntype PhoneLoginIdentifier = {\n    type: \"m.id.phone\";\n    country: string;\n    phone: string;\n};\n\ntype SpecUserIdentifier = UserLoginIdentifier | ThirdPartyLoginIdentifier | PhoneLoginIdentifier;\n\n/**\n * User Identifiers usable for login & user-interactive authentication.\n *\n * Extensibly allows more than Matrix specified identifiers.\n */\nexport type UserIdentifier =\n    | SpecUserIdentifier\n    | { type: Exclude<string, SpecUserIdentifier[\"type\"]>; [key: string]: any };\n\n/**\n * Request body for POST /login request\n * @see https://spec.matrix.org/v1.7/client-server-api/#post_matrixclientv3login\n */\nexport interface LoginRequest {\n    /**\n     * The login type being used.\n     */\n    type: \"m.login.password\" | \"m.login.token\" | string;\n    /**\n     * Third-party identifier for the user.\n     * @deprecated in favour of `identifier`.\n     */\n    address?: string;\n    /**\n     * ID of the client device.\n     * If this does not correspond to a known client device, a new device will be created.\n     * The given device ID must not be the same as a cross-signing key ID.\n     * The server will auto-generate a device_id if this is not specified.\n     */\n    device_id?: string;\n    /**\n     * Identification information for a user\n     */\n    identifier?: UserIdentifier;\n    /**\n     * A display name to assign to the newly-created device.\n     * Ignored if device_id corresponds to a known device.\n     */\n    initial_device_display_name?: string;\n    /**\n     * When logging in using a third-party identifier, the medium of the identifier.\n     * Must be `email`.\n     * @deprecated in favour of `identifier`.\n     */\n    medium?: \"email\";\n    /**\n     * Required when type is `m.login.password`. The user’s password.\n     */\n    password?: string;\n    /**\n     * If true, the client supports refresh tokens.\n     */\n    refresh_token?: boolean;\n    /**\n     * Required when type is `m.login.token`. Part of Token-based login.\n     */\n    token?: string;\n    /**\n     * The fully qualified user ID or just local part of the user ID, to log in.\n     * @deprecated in favour of identifier.\n     */\n    user?: string;\n    // Extensible\n    [key: string]: any;\n}\n\n// Export for backwards compatibility\nexport type ILoginParams = LoginRequest;\n\n/**\n * Response body for POST /login request\n * @see https://spec.matrix.org/v1.7/client-server-api/#post_matrixclientv3login\n */\nexport interface LoginResponse {\n    /**\n     * An access token for the account.\n     * This access token can then be used to authorize other requests.\n     */\n    access_token: string;\n    /**\n     * ID of the logged-in device.\n     * Will be the same as the corresponding parameter in the request, if one was specified.\n     */\n    device_id: string;\n    /**\n     * The fully-qualified Matrix ID for the account.\n     */\n    user_id: string;\n    /**\n     * The lifetime of the access token, in milliseconds.\n     * Once the access token has expired a new access token can be obtained by using the provided refresh token.\n     * If no refresh token is provided, the client will need to re-log in to obtain a new access token.\n     * If not given, the client can assume that the access token will not expire.\n     */\n    expires_in_ms?: number;\n    /**\n     * A refresh token for the account.\n     * This token can be used to obtain a new access token when it expires by calling the /refresh endpoint.\n     */\n    refresh_token?: string;\n    /**\n     * Optional client configuration provided by the server.\n     * If present, clients SHOULD use the provided object to reconfigure themselves, optionally validating the URLs within.\n     * This object takes the same form as the one returned from .well-known autodiscovery.\n     */\n    well_known?: IClientWellKnown;\n    /**\n     * The server_name of the homeserver on which the account has been registered.\n     * @deprecated Clients should extract the server_name from user_id (by splitting at the first colon) if they require it.\n     */\n    home_server?: string;\n}\n\n/**\n * The result of a successful `m.login.token` issuance request as per https://spec.matrix.org/v1.7/client-server-api/#post_matrixclientv1loginget_token\n */\nexport interface LoginTokenPostResponse {\n    /**\n     * The token to use with `m.login.token` to authenticate.\n     */\n    login_token: string;\n    /**\n     * Expiration in milliseconds.\n     */\n    expires_in_ms: number;\n}\n"],"mappings":";;;;;;AAgBA,IAAAA,gBAAA,GAAAC,OAAA;AAhBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;;AAEA;AACA;AACA;;AAOA;;AAEA;AACA;AACA;;AAeO,MAAMC,4BAA4B,GAAAC,OAAA,CAAAD,4BAAA,GAAG,IAAIE,8BAAa,CACzD,8BAA8B,EAC9B,iDACJ,CAAC;;AAED;AACA;AACA;AAFA,IAWYC,qBAAqB,GAAAF,OAAA,CAAAE,qBAAA,0BAArBA,qBAAqB;EAArBA,qBAAqB;EAArBA,qBAAqB;EAArBA,qBAAqB;EAArBA,qBAAqB;EAArBA,qBAAqB;EAArBA,qBAAqB;EAAA,OAArBA,qBAAqB;AAAA;AAAA,IAgBrBC,SAAS,GAAAH,OAAA,CAAAG,SAAA,0BAATA,SAAS;EAATA,SAAS;EAATA,SAAS;EAAA,OAATA,SAAS;AAAA;AAQrB;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAsDA;AAGA;AACA;AACA;AACA;AAyCA;AACA;AACA"}