{"version":3,"file":"groupCall.js","names":["_typedEventEmitter","require","_callFeed","_call","_roomState","_logger","_ReEmitter","_callEventTypes","_event","_callEventHandler","_groupCallEventHandler","_utils","_groupCallStats","_statsReport","_summaryStatsReportGatherer","_callFeedStatsReporter","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","_defineProperty2","default","getOwnPropertyDescriptors","defineProperties","defineProperty","GroupCallIntent","exports","GroupCallType","GroupCallTerminationReason","GroupCallEvent","GroupCallStatsReportEvent","GroupCallErrorCode","GroupCallError","Error","constructor","code","msg","err","GroupCallUnknownDeviceError","userId","UnknownDevice","OtherUserSpeakingError","GroupCallState","DEVICE_TIMEOUT","getCallUserId","call","_call$getOpponentMemb","getOpponentMember","invitee","GroupCall","TypedEventEmitter","client","room","type","isPtt","intent","groupCallId","dataChannelsEnabled","dataChannelOptions","isCallWithoutVideoAndAudio","useLivekit","livekitServiceURL","_room$currentState$ge","_room$currentState$ge2","Map","report","emit","ConnectionStats","ByteSentStats","SummaryStatsReportGatherer","extendSummaryReport","participants","SummaryStats","localCallFeed","CallFeedStatsReporter","expandCallFeedReport","callFeeds","forEachCall","callId","getFeeds","f","CallFeedStats","LocalCallFeedUninitialized","newCall","_newCall$getOpponentM","_this$calls$get","roomId","state","CallState","Ringing","logger","warn","log","reject","opponentUserId","undefined","info","deviceMap","calls","get","prevCall","getOpponentDeviceId","hangup","CallErrorCode","Replaced","set","initCall","feeds","getLocalFeeds","map","feed","clone","callExpected","setTracksEnabled","stream","getAudioTracks","getVideoTracks","answerWithCallFeeds","CallsChanged","needsRetry","participantMap","callMap","retriesMap","retryCallCounts","deviceId","participant","_retriesMap$get","_retriesMap","retries","getOpponentSessionId","sessionId","wantsOutgoingCall","placeOutgoingCalls","opponentMemberId","opponentDeviceId","currentUserMediaFeed","getUserMediaFeed","remoteUsermediaFeed","remoteFeedChanged","currentCallForUserDevice","addUserMediaFeed","replaceUserMediaFeed","removeUserMediaFeed","currentScreenshareFeed","getScreenshareFeed","remoteScreensharingFeed","remoteScreenshareFeedChanged","addScreenshareFeed","replaceScreenshareFeed","removeScreenshareFeed","_oldState","_call$getOpponentMemb2","Ended","audioMuted","isAudioMuted","localUsermediaStream","isMicrophoneMuted","setMicrophoneMuted","videoMuted","isVideoMuted","isLocalVideoMuted","setLocalVideoMuted","Connected","delete","size","_call$getOpponentMemb3","_call$getOpponentMemb4","hangupReason","getMember","disposeCall","topAvg","nextActiveSpeaker","callFeed","userMediaFeeds","isLocal","total","speakingVolumeSamples","reduce","acc","volume","Math","max","SPEAKING_THRESHOLD","avg","activeSpeaker","ActiveSpeakerChanged","updateParticipants","expected","Entered","newState","oldState","updateMemberState","catch","error","reEmitter","ReEmitter","genCallID","_livekitServiceURL","creationTs","currentState","getStateEvents","EventType","GroupCallPrefix","getTs","on","RoomStateEvent","Update","onRoomState","ParticipantsChanged","onParticipantsChanged","GroupCallStateChanged","onStateChanged","LocalScreenshareStateChanged","onLocalFeedsChanged","allowCallWithoutVideoAndAudio","create","Date","now","groupCallEventHandler","groupCalls","GroupCallEventHandlerEvent","Outgoing","sendCallStateEvent","groupCallState","sendStateEvent","updateLivekitServiceURL","newURL","_state","value","prevValue","_participants","participantStateEqual","x","y","screensharing","deviceMapsEqual","mapsEqual","_creationTs","enteredViaAnotherSession","_enteredViaAnotherSession","values","localScreenshareFeed","hasLocalParticipant","_this$participants$ge","_this$participants$ge2","getUserId","has","getDeviceId","_this$participants$ge3","member","initLocalCallFeed","InitializingLocalCallFeed","initCallFeedPromise","initLocalCallFeedInternal","getMediaHandler","getUserMediaStream","Video","MediaStream","stopUserMediaStream","CallFeed","purpose","SDPStreamMetadataPurpose","Usermedia","initWithAudioMuted","initWithVideoMuted","LocalCallFeedInitialized","updateLocalUsermediaStream","oldStream","setNewStream","micShouldBeMuted","vidShouldBeMuted","id","enter","CallEventHandlerEvent","Incoming","onIncomingCall","callEventHandler","retryCallLoopInterval","setInterval","onRetryCallLoop","retryCallInterval","onActiveSpeakerLoop","activeSpeakerLoopInterval","activeSpeakerInterval","dispose","_this$stats","stopScreensharingStream","localDesktopCapturerSourceId","stopAllStreams","transmitTimer","clearTimeout","clearInterval","participantsExpirationTimer","UserHangup","clear","removeListener","stats","stop","leave","terminate","emitStateEvent","off","existingStateEvent","getContent","CallEnded","muted","hasAudioDevice","sendUpdatesBefore","setTimeout","pttMaxTransmitTime","_call$localUsermediaF","localUsermediaFeed","setAudioVideoMuted","sendUpdates","updates","sendMetadataUpdate","Promise","all","hasPermission","checkAudioPermissionIfNecessary","LocalMuteStateChanged","hasAudioTrack","getTracks","hasVideoDevice","_","setScreensharingEnabled","enabled","opts","isScreensharing","getScreensharingStream","track","onTrackEnded","removeEventListener","addEventListener","desktopCapturerSourceId","Screenshare","pushLocalFeed","throwOnFail","NoUserMedia","localScreensharingFeed","removeLocalFeed","localUserId","localDeviceId","callsChanged","_this$calls$get2","debug","NewSession","createNewMatrixCall","opponentSessionId","placeCallWithCallFeeds","then","createDataChannel","CallError","PlaceCallFailed","SignallingFailed","getMemberStateEvents","GroupCallMemberPrefix","onCallFeedsChanged","onCallStateChanged","onCallHangup","onCallReplaced","callHandlers","CallEvent","FeedsChanged","State","Hangup","reEmit","initStats","getGroupCallStats","usermediaFeed","screenshareFeed","find","measureVolumeActivity","UserMediaFeedsChanged","existingFeed","replacementFeed","feedIndex","findIndex","splice","screenshareFeeds","ScreenshareFeedsChanged","localMember","entered","nextExpiration","Infinity","getStateKey","content","Array","isArray","devices","validDevices","d","device_id","session_id","expires_ts","membership","some","getSessionId","updateDevices","fn","keepAlive","_event$getContent","event","otherCalls","c","newDevices","newCalls","newContent","addDeviceToMemberState","resendMemberStateTimer","cleanMemberState","myDevices","getDevices","device","last_seen_ts","userID","GroupCallStats","statsCollectIntervalTime","reports","StatsReport","CONNECTION_STATS","onConnectionStats","BYTE_SENT_STATS","onByteSentStats","SUMMARY_STATS","onSummaryStats","CALL_FEED_REPORT","onCallFeedReport","setGroupCallStatsInterval","interval","start"],"sources":["../../src/webrtc/groupCall.ts"],"sourcesContent":["import { TypedEventEmitter } from \"../models/typed-event-emitter\";\nimport { CallFeed, SPEAKING_THRESHOLD } from \"./callFeed\";\nimport { MatrixClient, IMyDevice } from \"../client\";\nimport {\n    CallErrorCode,\n    CallEvent,\n    CallEventHandlerMap,\n    CallState,\n    genCallID,\n    MatrixCall,\n    setTracksEnabled,\n    createNewMatrixCall,\n    CallError,\n} from \"./call\";\nimport { RoomMember } from \"../models/room-member\";\nimport { Room } from \"../models/room\";\nimport { RoomStateEvent } from \"../models/room-state\";\nimport { logger } from \"../logger\";\nimport { ReEmitter } from \"../ReEmitter\";\nimport { SDPStreamMetadataPurpose } from \"./callEventTypes\";\nimport { MatrixEvent } from \"../models/event\";\nimport { EventType } from \"../@types/event\";\nimport { CallEventHandlerEvent } from \"./callEventHandler\";\nimport { GroupCallEventHandlerEvent } from \"./groupCallEventHandler\";\nimport { IScreensharingOpts } from \"./mediaHandler\";\nimport { mapsEqual } from \"../utils\";\nimport { GroupCallStats } from \"./stats/groupCallStats\";\nimport {\n    ByteSentStatsReport,\n    CallFeedReport,\n    ConnectionStatsReport,\n    StatsReport,\n    SummaryStatsReport,\n} from \"./stats/statsReport\";\nimport { SummaryStatsReportGatherer } from \"./stats/summaryStatsReportGatherer\";\nimport { CallFeedStatsReporter } from \"./stats/callFeedStatsReporter\";\n\nexport enum GroupCallIntent {\n    Ring = \"m.ring\",\n    Prompt = \"m.prompt\",\n    Room = \"m.room\",\n}\n\nexport enum GroupCallType {\n    Video = \"m.video\",\n    Voice = \"m.voice\",\n}\n\nexport enum GroupCallTerminationReason {\n    CallEnded = \"call_ended\",\n}\n\nexport type CallsByUserAndDevice = Map<string, Map<string, MatrixCall>>;\n\n/**\n * Because event names are just strings, they do need\n * to be unique over all event types of event emitter.\n * Some objects could emit more then one set of events.\n */\nexport enum GroupCallEvent {\n    GroupCallStateChanged = \"group_call_state_changed\",\n    ActiveSpeakerChanged = \"active_speaker_changed\",\n    CallsChanged = \"calls_changed\",\n    UserMediaFeedsChanged = \"user_media_feeds_changed\",\n    ScreenshareFeedsChanged = \"screenshare_feeds_changed\",\n    LocalScreenshareStateChanged = \"local_screenshare_state_changed\",\n    LocalMuteStateChanged = \"local_mute_state_changed\",\n    ParticipantsChanged = \"participants_changed\",\n    Error = \"group_call_error\",\n}\n\nexport type GroupCallEventHandlerMap = {\n    [GroupCallEvent.GroupCallStateChanged]: (newState: GroupCallState, oldState: GroupCallState) => void;\n    [GroupCallEvent.ActiveSpeakerChanged]: (activeSpeaker: CallFeed | undefined) => void;\n    [GroupCallEvent.CallsChanged]: (calls: CallsByUserAndDevice) => void;\n    [GroupCallEvent.UserMediaFeedsChanged]: (feeds: CallFeed[]) => void;\n    [GroupCallEvent.ScreenshareFeedsChanged]: (feeds: CallFeed[]) => void;\n    [GroupCallEvent.LocalScreenshareStateChanged]: (\n        isScreensharing: boolean,\n        feed?: CallFeed,\n        sourceId?: string,\n    ) => void;\n    [GroupCallEvent.LocalMuteStateChanged]: (audioMuted: boolean, videoMuted: boolean) => void;\n    [GroupCallEvent.ParticipantsChanged]: (participants: Map<RoomMember, Map<string, ParticipantState>>) => void;\n    /**\n     * Fires whenever an error occurs when call.js encounters an issue with setting up the call.\n     * <p>\n     * The error given will have a code equal to either `MatrixCall.ERR_LOCAL_OFFER_FAILED` or\n     * `MatrixCall.ERR_NO_USER_MEDIA`. `ERR_LOCAL_OFFER_FAILED` is emitted when the local client\n     * fails to create an offer. `ERR_NO_USER_MEDIA` is emitted when the user has denied access\n     * to their audio/video hardware.\n     * @param err - The error raised by MatrixCall.\n     * @example\n     * ```\n     * matrixCall.on(\"error\", function(err){\n     *   console.error(err.code, err);\n     * });\n     * ```\n     */\n    [GroupCallEvent.Error]: (error: GroupCallError) => void;\n};\n\nexport enum GroupCallStatsReportEvent {\n    ConnectionStats = \"GroupCall.connection_stats\",\n    ByteSentStats = \"GroupCall.byte_sent_stats\",\n    SummaryStats = \"GroupCall.summary_stats\",\n    CallFeedStats = \"GroupCall.call_feed_stats\",\n}\n\n/**\n * The final report-events that get consumed by client.\n */\nexport type GroupCallStatsReportEventHandlerMap = {\n    [GroupCallStatsReportEvent.ConnectionStats]: (report: GroupCallStatsReport<ConnectionStatsReport>) => void;\n    [GroupCallStatsReportEvent.ByteSentStats]: (report: GroupCallStatsReport<ByteSentStatsReport>) => void;\n    [GroupCallStatsReportEvent.SummaryStats]: (report: GroupCallStatsReport<SummaryStatsReport>) => void;\n    [GroupCallStatsReportEvent.CallFeedStats]: (report: GroupCallStatsReport<CallFeedReport>) => void;\n};\n\nexport enum GroupCallErrorCode {\n    NoUserMedia = \"no_user_media\",\n    UnknownDevice = \"unknown_device\",\n    PlaceCallFailed = \"place_call_failed\",\n}\n\nexport interface GroupCallStatsReport<\n    T extends ConnectionStatsReport | ByteSentStatsReport | SummaryStatsReport | CallFeedReport,\n> {\n    report: T;\n}\n\nexport class GroupCallError extends Error {\n    public code: string;\n\n    public constructor(code: GroupCallErrorCode, msg: string, err?: Error) {\n        // Still don't think there's any way to have proper nested errors\n        if (err) {\n            super(msg + \": \" + err);\n        } else {\n            super(msg);\n        }\n\n        this.code = code;\n    }\n}\n\nexport class GroupCallUnknownDeviceError extends GroupCallError {\n    public constructor(public userId: string) {\n        super(GroupCallErrorCode.UnknownDevice, \"No device found for \" + userId);\n    }\n}\n\nexport class OtherUserSpeakingError extends Error {\n    public constructor() {\n        super(\"Cannot unmute: another user is speaking\");\n    }\n}\n\nexport interface IGroupCallDataChannelOptions {\n    ordered: boolean;\n    maxPacketLifeTime: number;\n    maxRetransmits: number;\n    protocol: string;\n}\n\nexport interface IGroupCallRoomState {\n    \"m.intent\": GroupCallIntent;\n    \"m.type\": GroupCallType;\n    \"io.element.ptt\"?: boolean;\n    // TODO: Specify data-channels\n    \"dataChannelsEnabled\"?: boolean;\n    \"dataChannelOptions\"?: IGroupCallDataChannelOptions;\n\n    \"io.element.livekit_service_url\"?: string;\n}\n\nexport interface IGroupCallRoomMemberFeed {\n    purpose: SDPStreamMetadataPurpose;\n}\n\nexport interface IGroupCallRoomMemberDevice {\n    device_id: string;\n    session_id: string;\n    expires_ts: number;\n    feeds: IGroupCallRoomMemberFeed[];\n}\n\nexport interface IGroupCallRoomMemberCallState {\n    \"m.call_id\": string;\n    \"m.foci\"?: string[];\n    \"m.devices\": IGroupCallRoomMemberDevice[];\n}\n\nexport interface IGroupCallRoomMemberState {\n    \"m.calls\": IGroupCallRoomMemberCallState[];\n}\n\nexport enum GroupCallState {\n    LocalCallFeedUninitialized = \"local_call_feed_uninitialized\",\n    InitializingLocalCallFeed = \"initializing_local_call_feed\",\n    LocalCallFeedInitialized = \"local_call_feed_initialized\",\n    Entered = \"entered\",\n    Ended = \"ended\",\n}\n\nexport interface ParticipantState {\n    sessionId: string;\n    screensharing: boolean;\n}\n\ninterface ICallHandlers {\n    onCallFeedsChanged: (feeds: CallFeed[]) => void;\n    onCallStateChanged: (state: CallState, oldState: CallState | undefined) => void;\n    onCallHangup: (call: MatrixCall) => void;\n    onCallReplaced: (newCall: MatrixCall) => void;\n}\n\nconst DEVICE_TIMEOUT = 1000 * 60 * 60; // 1 hour\n\nfunction getCallUserId(call: MatrixCall): string | null {\n    return call.getOpponentMember()?.userId || call.invitee || null;\n}\n\nexport class GroupCall extends TypedEventEmitter<\n    GroupCallEvent | CallEvent | GroupCallStatsReportEvent,\n    GroupCallEventHandlerMap & CallEventHandlerMap & GroupCallStatsReportEventHandlerMap\n> {\n    // Config\n    public activeSpeakerInterval = 1000;\n    public retryCallInterval = 5000;\n    public participantTimeout = 1000 * 15;\n    public pttMaxTransmitTime = 1000 * 20;\n\n    public activeSpeaker?: CallFeed;\n    public localCallFeed?: CallFeed;\n    public localScreenshareFeed?: CallFeed;\n    public localDesktopCapturerSourceId?: string;\n    public readonly userMediaFeeds: CallFeed[] = [];\n    public readonly screenshareFeeds: CallFeed[] = [];\n    public groupCallId: string;\n    public readonly allowCallWithoutVideoAndAudio: boolean;\n\n    private readonly calls = new Map<string, Map<string, MatrixCall>>(); // user_id -> device_id -> MatrixCall\n    private callHandlers = new Map<string, Map<string, ICallHandlers>>(); // user_id -> device_id -> ICallHandlers\n    private activeSpeakerLoopInterval?: ReturnType<typeof setTimeout>;\n    private retryCallLoopInterval?: ReturnType<typeof setTimeout>;\n    private retryCallCounts: Map<string, Map<string, number>> = new Map(); // user_id -> device_id -> count\n    private reEmitter: ReEmitter;\n    private transmitTimer: ReturnType<typeof setTimeout> | null = null;\n    private participantsExpirationTimer: ReturnType<typeof setTimeout> | null = null;\n    private resendMemberStateTimer: ReturnType<typeof setInterval> | null = null;\n    private initWithAudioMuted = false;\n    private initWithVideoMuted = false;\n    private initCallFeedPromise?: Promise<void>;\n    private _livekitServiceURL?: string;\n\n    private stats: GroupCallStats | undefined;\n    /**\n     * Configure default webrtc stats collection interval in ms\n     * Disable collecting webrtc stats by setting interval to 0\n     */\n    private statsCollectIntervalTime = 0;\n\n    public constructor(\n        private client: MatrixClient,\n        public room: Room,\n        public type: GroupCallType,\n        public isPtt: boolean,\n        public intent: GroupCallIntent,\n        groupCallId?: string,\n        private dataChannelsEnabled?: boolean,\n        private dataChannelOptions?: IGroupCallDataChannelOptions,\n        isCallWithoutVideoAndAudio?: boolean,\n        // this tells the js-sdk not to actually establish any calls to exchange media and just to\n        // create the group call signaling events, with the intention that the actual media will be\n        // handled using livekit. The js-sdk doesn't contain any code to do the actual livekit call though.\n        private useLivekit = false,\n        livekitServiceURL?: string,\n    ) {\n        super();\n        this.reEmitter = new ReEmitter(this);\n        this.groupCallId = groupCallId ?? genCallID();\n        this._livekitServiceURL = livekitServiceURL;\n        this.creationTs =\n            room.currentState.getStateEvents(EventType.GroupCallPrefix, this.groupCallId)?.getTs() ?? null;\n        this.updateParticipants();\n\n        room.on(RoomStateEvent.Update, this.onRoomState);\n        this.on(GroupCallEvent.ParticipantsChanged, this.onParticipantsChanged);\n        this.on(GroupCallEvent.GroupCallStateChanged, this.onStateChanged);\n        this.on(GroupCallEvent.LocalScreenshareStateChanged, this.onLocalFeedsChanged);\n        this.allowCallWithoutVideoAndAudio = !!isCallWithoutVideoAndAudio;\n    }\n\n    private onConnectionStats = (report: ConnectionStatsReport): void => {\n        // Final emit of the summary event, to be consumed by the client\n        this.emit(GroupCallStatsReportEvent.ConnectionStats, { report });\n    };\n\n    private onByteSentStats = (report: ByteSentStatsReport): void => {\n        // Final emit of the summary event, to be consumed by the client\n        this.emit(GroupCallStatsReportEvent.ByteSentStats, { report });\n    };\n\n    private onSummaryStats = (report: SummaryStatsReport): void => {\n        SummaryStatsReportGatherer.extendSummaryReport(report, this.participants);\n        // Final emit of the summary event, to be consumed by the client\n        this.emit(GroupCallStatsReportEvent.SummaryStats, { report });\n    };\n\n    private onCallFeedReport = (report: CallFeedReport): void => {\n        if (this.localCallFeed) {\n            report = CallFeedStatsReporter.expandCallFeedReport(report, [this.localCallFeed], \"from-local-feed\");\n        }\n\n        const callFeeds: CallFeed[] = [];\n        this.forEachCall((call) => {\n            if (call.callId === report.callId) {\n                call.getFeeds().forEach((f) => callFeeds.push(f));\n            }\n        });\n\n        report = CallFeedStatsReporter.expandCallFeedReport(report, callFeeds, \"from-call-feed\");\n        this.emit(GroupCallStatsReportEvent.CallFeedStats, { report });\n    };\n\n    public async create(): Promise<GroupCall> {\n        this.creationTs = Date.now();\n        this.client.groupCallEventHandler!.groupCalls.set(this.room.roomId, this);\n        this.client.emit(GroupCallEventHandlerEvent.Outgoing, this);\n\n        await this.sendCallStateEvent();\n\n        return this;\n    }\n\n    private async sendCallStateEvent(): Promise<void> {\n        const groupCallState: IGroupCallRoomState = {\n            \"m.intent\": this.intent,\n            \"m.type\": this.type,\n            \"io.element.ptt\": this.isPtt,\n            // TODO: Specify data-channels better\n            \"dataChannelsEnabled\": this.dataChannelsEnabled,\n            \"dataChannelOptions\": this.dataChannelsEnabled ? this.dataChannelOptions : undefined,\n        };\n        if (this.livekitServiceURL) {\n            groupCallState[\"io.element.livekit_service_url\"] = this.livekitServiceURL;\n        }\n\n        await this.client.sendStateEvent(this.room.roomId, EventType.GroupCallPrefix, groupCallState, this.groupCallId);\n    }\n\n    public get livekitServiceURL(): string | undefined {\n        return this._livekitServiceURL;\n    }\n\n    public updateLivekitServiceURL(newURL: string): Promise<void> {\n        this._livekitServiceURL = newURL;\n        return this.sendCallStateEvent();\n    }\n\n    private _state = GroupCallState.LocalCallFeedUninitialized;\n\n    /**\n     * The group call's state.\n     */\n    public get state(): GroupCallState {\n        return this._state;\n    }\n\n    private set state(value: GroupCallState) {\n        const prevValue = this._state;\n        if (value !== prevValue) {\n            this._state = value;\n            this.emit(GroupCallEvent.GroupCallStateChanged, value, prevValue);\n        }\n    }\n\n    private _participants = new Map<RoomMember, Map<string, ParticipantState>>();\n\n    /**\n     * The current participants in the call, as a map from members to device IDs\n     * to participant info.\n     */\n    public get participants(): Map<RoomMember, Map<string, ParticipantState>> {\n        return this._participants;\n    }\n\n    private set participants(value: Map<RoomMember, Map<string, ParticipantState>>) {\n        const prevValue = this._participants;\n        const participantStateEqual = (x: ParticipantState, y: ParticipantState): boolean =>\n            x.sessionId === y.sessionId && x.screensharing === y.screensharing;\n        const deviceMapsEqual = (x: Map<string, ParticipantState>, y: Map<string, ParticipantState>): boolean =>\n            mapsEqual(x, y, participantStateEqual);\n\n        // Only update if the map actually changed\n        if (!mapsEqual(value, prevValue, deviceMapsEqual)) {\n            this._participants = value;\n            this.emit(GroupCallEvent.ParticipantsChanged, value);\n        }\n    }\n\n    private _creationTs: number | null = null;\n\n    /**\n     * The timestamp at which the call was created, or null if it has not yet\n     * been created.\n     */\n    public get creationTs(): number | null {\n        return this._creationTs;\n    }\n\n    private set creationTs(value: number | null) {\n        this._creationTs = value;\n    }\n\n    private _enteredViaAnotherSession = false;\n\n    /**\n     * Whether the local device has entered this call via another session, such\n     * as a widget.\n     */\n    public get enteredViaAnotherSession(): boolean {\n        return this._enteredViaAnotherSession;\n    }\n\n    public set enteredViaAnotherSession(value: boolean) {\n        this._enteredViaAnotherSession = value;\n        this.updateParticipants();\n    }\n\n    /**\n     * Executes the given callback on all calls in this group call.\n     * @param f - The callback.\n     */\n    public forEachCall(f: (call: MatrixCall) => void): void {\n        for (const deviceMap of this.calls.values()) {\n            for (const call of deviceMap.values()) f(call);\n        }\n    }\n\n    public getLocalFeeds(): CallFeed[] {\n        const feeds: CallFeed[] = [];\n\n        if (this.localCallFeed) feeds.push(this.localCallFeed);\n        if (this.localScreenshareFeed) feeds.push(this.localScreenshareFeed);\n\n        return feeds;\n    }\n\n    public hasLocalParticipant(): boolean {\n        return (\n            this.participants.get(this.room.getMember(this.client.getUserId()!)!)?.has(this.client.getDeviceId()!) ??\n            false\n        );\n    }\n\n    /**\n     * Determines whether the given call is one that we were expecting to exist\n     * given our knowledge of who is participating in the group call.\n     */\n    private callExpected(call: MatrixCall): boolean {\n        const userId = getCallUserId(call);\n        const member = userId === null ? null : this.room.getMember(userId);\n        const deviceId = call.getOpponentDeviceId();\n        return member !== null && deviceId !== undefined && this.participants.get(member)?.get(deviceId) !== undefined;\n    }\n\n    public async initLocalCallFeed(): Promise<void> {\n        if (this.useLivekit) {\n            logger.info(\"Livekit group call: not starting local call feed.\");\n            return;\n        }\n\n        if (this.state !== GroupCallState.LocalCallFeedUninitialized) {\n            throw new Error(`Cannot initialize local call feed in the \"${this.state}\" state.`);\n        }\n        this.state = GroupCallState.InitializingLocalCallFeed;\n\n        // wraps the real method to serialise calls, because we don't want to try starting\n        // multiple call feeds at once\n        if (this.initCallFeedPromise) return this.initCallFeedPromise;\n\n        try {\n            this.initCallFeedPromise = this.initLocalCallFeedInternal();\n            await this.initCallFeedPromise;\n        } finally {\n            this.initCallFeedPromise = undefined;\n        }\n    }\n\n    private async initLocalCallFeedInternal(): Promise<void> {\n        logger.log(`GroupCall ${this.groupCallId} initLocalCallFeedInternal() running`);\n\n        let stream: MediaStream;\n\n        try {\n            stream = await this.client.getMediaHandler().getUserMediaStream(true, this.type === GroupCallType.Video);\n        } catch (error) {\n            // If is allowed to join a call without a media stream, then we\n            // don't throw an error here. But we need an empty Local Feed to establish\n            // a connection later.\n            if (this.allowCallWithoutVideoAndAudio) {\n                stream = new MediaStream();\n            } else {\n                this.state = GroupCallState.LocalCallFeedUninitialized;\n                throw error;\n            }\n        }\n\n        // The call could've been disposed while we were waiting, and could\n        // also have been started back up again (hello, React 18) so if we're\n        // still in this 'initializing' state, carry on, otherwise bail.\n        if (this._state !== GroupCallState.InitializingLocalCallFeed) {\n            this.client.getMediaHandler().stopUserMediaStream(stream);\n            throw new Error(\"Group call disposed while gathering media stream\");\n        }\n\n        const callFeed = new CallFeed({\n            client: this.client,\n            roomId: this.room.roomId,\n            userId: this.client.getUserId()!,\n            deviceId: this.client.getDeviceId()!,\n            stream,\n            purpose: SDPStreamMetadataPurpose.Usermedia,\n            audioMuted: this.initWithAudioMuted || stream.getAudioTracks().length === 0 || this.isPtt,\n            videoMuted: this.initWithVideoMuted || stream.getVideoTracks().length === 0,\n        });\n\n        setTracksEnabled(stream.getAudioTracks(), !callFeed.isAudioMuted());\n        setTracksEnabled(stream.getVideoTracks(), !callFeed.isVideoMuted());\n\n        this.localCallFeed = callFeed;\n        this.addUserMediaFeed(callFeed);\n\n        this.state = GroupCallState.LocalCallFeedInitialized;\n    }\n\n    public async updateLocalUsermediaStream(stream: MediaStream): Promise<void> {\n        if (this.localCallFeed) {\n            const oldStream = this.localCallFeed.stream;\n            this.localCallFeed.setNewStream(stream);\n            const micShouldBeMuted = this.localCallFeed.isAudioMuted();\n            const vidShouldBeMuted = this.localCallFeed.isVideoMuted();\n            logger.log(\n                `GroupCall ${this.groupCallId} updateLocalUsermediaStream() (oldStreamId=${oldStream.id}, newStreamId=${stream.id}, micShouldBeMuted=${micShouldBeMuted}, vidShouldBeMuted=${vidShouldBeMuted})`,\n            );\n            setTracksEnabled(stream.getAudioTracks(), !micShouldBeMuted);\n            setTracksEnabled(stream.getVideoTracks(), !vidShouldBeMuted);\n            this.client.getMediaHandler().stopUserMediaStream(oldStream);\n        }\n    }\n\n    public async enter(): Promise<void> {\n        if (this.state === GroupCallState.LocalCallFeedUninitialized) {\n            await this.initLocalCallFeed();\n        } else if (this.state !== GroupCallState.LocalCallFeedInitialized) {\n            throw new Error(`Cannot enter call in the \"${this.state}\" state`);\n        }\n\n        logger.log(`GroupCall ${this.groupCallId} enter() running`);\n        this.state = GroupCallState.Entered;\n\n        this.client.on(CallEventHandlerEvent.Incoming, this.onIncomingCall);\n\n        for (const call of this.client.callEventHandler!.calls.values()) {\n            this.onIncomingCall(call);\n        }\n\n        if (!this.useLivekit) {\n            this.retryCallLoopInterval = setInterval(this.onRetryCallLoop, this.retryCallInterval);\n\n            this.activeSpeaker = undefined;\n            this.onActiveSpeakerLoop();\n            this.activeSpeakerLoopInterval = setInterval(this.onActiveSpeakerLoop, this.activeSpeakerInterval);\n        }\n    }\n\n    private dispose(): void {\n        if (this.localCallFeed) {\n            this.removeUserMediaFeed(this.localCallFeed);\n            this.localCallFeed = undefined;\n        }\n\n        if (this.localScreenshareFeed) {\n            this.client.getMediaHandler().stopScreensharingStream(this.localScreenshareFeed.stream);\n            this.removeScreenshareFeed(this.localScreenshareFeed);\n            this.localScreenshareFeed = undefined;\n            this.localDesktopCapturerSourceId = undefined;\n        }\n\n        this.client.getMediaHandler().stopAllStreams();\n\n        if (this.transmitTimer !== null) {\n            clearTimeout(this.transmitTimer);\n            this.transmitTimer = null;\n        }\n\n        if (this.retryCallLoopInterval !== undefined) {\n            clearInterval(this.retryCallLoopInterval);\n            this.retryCallLoopInterval = undefined;\n        }\n\n        if (this.participantsExpirationTimer !== null) {\n            clearTimeout(this.participantsExpirationTimer);\n            this.participantsExpirationTimer = null;\n        }\n\n        if (this.state !== GroupCallState.Entered) {\n            return;\n        }\n\n        this.forEachCall((call) => call.hangup(CallErrorCode.UserHangup, false));\n\n        this.activeSpeaker = undefined;\n        clearInterval(this.activeSpeakerLoopInterval);\n\n        this.retryCallCounts.clear();\n        clearInterval(this.retryCallLoopInterval);\n\n        this.client.removeListener(CallEventHandlerEvent.Incoming, this.onIncomingCall);\n        this.stats?.stop();\n    }\n\n    public leave(): void {\n        this.dispose();\n        this.state = GroupCallState.LocalCallFeedUninitialized;\n    }\n\n    public async terminate(emitStateEvent = true): Promise<void> {\n        this.dispose();\n\n        this.room.off(RoomStateEvent.Update, this.onRoomState);\n        this.client.groupCallEventHandler!.groupCalls.delete(this.room.roomId);\n        this.client.emit(GroupCallEventHandlerEvent.Ended, this);\n        this.state = GroupCallState.Ended;\n\n        if (emitStateEvent) {\n            const existingStateEvent = this.room.currentState.getStateEvents(\n                EventType.GroupCallPrefix,\n                this.groupCallId,\n            )!;\n\n            await this.client.sendStateEvent(\n                this.room.roomId,\n                EventType.GroupCallPrefix,\n                {\n                    ...existingStateEvent.getContent(),\n                    \"m.terminated\": GroupCallTerminationReason.CallEnded,\n                },\n                this.groupCallId,\n            );\n        }\n    }\n\n    /*\n     * Local Usermedia\n     */\n\n    public isLocalVideoMuted(): boolean {\n        if (this.localCallFeed) {\n            return this.localCallFeed.isVideoMuted();\n        }\n\n        return true;\n    }\n\n    public isMicrophoneMuted(): boolean {\n        if (this.localCallFeed) {\n            return this.localCallFeed.isAudioMuted();\n        }\n\n        return true;\n    }\n\n    /**\n     * Sets the mute state of the local participants's microphone.\n     * @param muted - Whether to mute the microphone\n     * @returns Whether muting/unmuting was successful\n     */\n    public async setMicrophoneMuted(muted: boolean): Promise<boolean> {\n        // hasAudioDevice can block indefinitely if the window has lost focus,\n        // and it doesn't make much sense to keep a device from being muted, so\n        // we always allow muted = true changes to go through\n        if (!muted && !(await this.client.getMediaHandler().hasAudioDevice())) {\n            return false;\n        }\n\n        const sendUpdatesBefore = !muted && this.isPtt;\n\n        // set a timer for the maximum transmit time on PTT calls\n        if (this.isPtt) {\n            // Set or clear the max transmit timer\n            if (!muted && this.isMicrophoneMuted()) {\n                this.transmitTimer = setTimeout(() => {\n                    this.setMicrophoneMuted(true);\n                }, this.pttMaxTransmitTime);\n            } else if (muted && !this.isMicrophoneMuted()) {\n                if (this.transmitTimer !== null) clearTimeout(this.transmitTimer);\n                this.transmitTimer = null;\n            }\n        }\n\n        this.forEachCall((call) => call.localUsermediaFeed?.setAudioVideoMuted(muted, null));\n\n        const sendUpdates = async (): Promise<void> => {\n            const updates: Promise<void>[] = [];\n            this.forEachCall((call) => updates.push(call.sendMetadataUpdate()));\n\n            await Promise.all(updates).catch((e) =>\n                logger.info(\n                    `GroupCall ${this.groupCallId} setMicrophoneMuted() failed to send some metadata updates`,\n                    e,\n                ),\n            );\n        };\n\n        if (sendUpdatesBefore) await sendUpdates();\n\n        if (this.localCallFeed) {\n            logger.log(\n                `GroupCall ${this.groupCallId} setMicrophoneMuted() (streamId=${this.localCallFeed.stream.id}, muted=${muted})`,\n            );\n\n            const hasPermission = await this.checkAudioPermissionIfNecessary(muted);\n\n            if (!hasPermission) {\n                return false;\n            }\n\n            this.localCallFeed.setAudioVideoMuted(muted, null);\n            // I don't believe its actually necessary to enable these tracks: they\n            // are the one on the GroupCall's own CallFeed and are cloned before being\n            // given to any of the actual calls, so these tracks don't actually go\n            // anywhere. Let's do it anyway to avoid confusion.\n            setTracksEnabled(this.localCallFeed.stream.getAudioTracks(), !muted);\n        } else {\n            logger.log(`GroupCall ${this.groupCallId} setMicrophoneMuted() no stream muted (muted=${muted})`);\n            this.initWithAudioMuted = muted;\n        }\n\n        this.forEachCall((call) =>\n            setTracksEnabled(call.localUsermediaFeed!.stream.getAudioTracks(), !muted && this.callExpected(call)),\n        );\n        this.emit(GroupCallEvent.LocalMuteStateChanged, muted, this.isLocalVideoMuted());\n\n        if (!sendUpdatesBefore) await sendUpdates();\n\n        return true;\n    }\n\n    /**\n     * If we allow entering a call without a camera and without video, it can happen that the access rights to the\n     * devices have not yet been queried. If a stream does not yet have an audio track, we assume that the rights have\n     * not yet been checked.\n     *\n     * `this.client.getMediaHandler().getUserMediaStream` clones the current stream, so it only wanted to be called when\n     * not Audio Track exists.\n     * As such, this is a compromise, because, the access rights should always be queried before the call.\n     */\n    private async checkAudioPermissionIfNecessary(muted: boolean): Promise<boolean> {\n        // We needed this here to avoid an error in case user join a call without a device.\n        try {\n            if (!muted && this.localCallFeed && !this.localCallFeed.hasAudioTrack) {\n                const stream = await this.client\n                    .getMediaHandler()\n                    .getUserMediaStream(true, !this.localCallFeed.isVideoMuted());\n                if (stream?.getTracks().length === 0) {\n                    // if case permission denied to get a stream stop this here\n                    /* istanbul ignore next */\n                    logger.log(\n                        `GroupCall ${this.groupCallId} setMicrophoneMuted() no device to receive local stream, muted=${muted}`,\n                    );\n                    return false;\n                }\n            }\n        } catch (e) {\n            /* istanbul ignore next */\n            logger.log(\n                `GroupCall ${this.groupCallId} setMicrophoneMuted() no device or permission to receive local stream, muted=${muted}`,\n            );\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Sets the mute state of the local participants's video.\n     * @param muted - Whether to mute the video\n     * @returns Whether muting/unmuting was successful\n     */\n    public async setLocalVideoMuted(muted: boolean): Promise<boolean> {\n        // hasAudioDevice can block indefinitely if the window has lost focus,\n        // and it doesn't make much sense to keep a device from being muted, so\n        // we always allow muted = true changes to go through\n        if (!muted && !(await this.client.getMediaHandler().hasVideoDevice())) {\n            return false;\n        }\n\n        if (this.localCallFeed) {\n            /* istanbul ignore next */\n            logger.log(\n                `GroupCall ${this.groupCallId} setLocalVideoMuted() (stream=${this.localCallFeed.stream.id}, muted=${muted})`,\n            );\n\n            try {\n                const stream = await this.client.getMediaHandler().getUserMediaStream(true, !muted);\n                await this.updateLocalUsermediaStream(stream);\n                this.localCallFeed.setAudioVideoMuted(null, muted);\n                setTracksEnabled(this.localCallFeed.stream.getVideoTracks(), !muted);\n            } catch (_) {\n                // No permission to video device\n                /* istanbul ignore next */\n                logger.log(\n                    `GroupCall ${this.groupCallId} setLocalVideoMuted() no device or permission to receive local stream, muted=${muted}`,\n                );\n                return false;\n            }\n        } else {\n            logger.log(`GroupCall ${this.groupCallId} setLocalVideoMuted() no stream muted (muted=${muted})`);\n            this.initWithVideoMuted = muted;\n        }\n\n        const updates: Promise<unknown>[] = [];\n        this.forEachCall((call) => updates.push(call.setLocalVideoMuted(muted)));\n        await Promise.all(updates);\n\n        // We setTracksEnabled again, independently from the call doing it\n        // internally, since we might not be expecting the call\n        this.forEachCall((call) =>\n            setTracksEnabled(call.localUsermediaFeed!.stream.getVideoTracks(), !muted && this.callExpected(call)),\n        );\n\n        this.emit(GroupCallEvent.LocalMuteStateChanged, this.isMicrophoneMuted(), muted);\n\n        return true;\n    }\n\n    public async setScreensharingEnabled(enabled: boolean, opts: IScreensharingOpts = {}): Promise<boolean> {\n        if (enabled === this.isScreensharing()) {\n            return enabled;\n        }\n\n        if (enabled) {\n            try {\n                logger.log(\n                    `GroupCall ${this.groupCallId} setScreensharingEnabled() is asking for screensharing permissions`,\n                );\n                const stream = await this.client.getMediaHandler().getScreensharingStream(opts);\n\n                for (const track of stream.getTracks()) {\n                    const onTrackEnded = (): void => {\n                        this.setScreensharingEnabled(false);\n                        track.removeEventListener(\"ended\", onTrackEnded);\n                    };\n\n                    track.addEventListener(\"ended\", onTrackEnded);\n                }\n\n                logger.log(\n                    `GroupCall ${this.groupCallId} setScreensharingEnabled() granted screensharing permissions. Setting screensharing enabled on all calls`,\n                );\n\n                this.localDesktopCapturerSourceId = opts.desktopCapturerSourceId;\n                this.localScreenshareFeed = new CallFeed({\n                    client: this.client,\n                    roomId: this.room.roomId,\n                    userId: this.client.getUserId()!,\n                    deviceId: this.client.getDeviceId()!,\n                    stream,\n                    purpose: SDPStreamMetadataPurpose.Screenshare,\n                    audioMuted: false,\n                    videoMuted: false,\n                });\n                this.addScreenshareFeed(this.localScreenshareFeed);\n\n                this.emit(\n                    GroupCallEvent.LocalScreenshareStateChanged,\n                    true,\n                    this.localScreenshareFeed,\n                    this.localDesktopCapturerSourceId,\n                );\n\n                // TODO: handle errors\n                this.forEachCall((call) => call.pushLocalFeed(this.localScreenshareFeed!.clone()));\n\n                return true;\n            } catch (error) {\n                if (opts.throwOnFail) throw error;\n                logger.error(\n                    `GroupCall ${this.groupCallId} setScreensharingEnabled() enabling screensharing error`,\n                    error,\n                );\n                this.emit(\n                    GroupCallEvent.Error,\n                    new GroupCallError(\n                        GroupCallErrorCode.NoUserMedia,\n                        \"Failed to get screen-sharing stream: \",\n                        error as Error,\n                    ),\n                );\n                return false;\n            }\n        } else {\n            this.forEachCall((call) => {\n                if (call.localScreensharingFeed) call.removeLocalFeed(call.localScreensharingFeed);\n            });\n            this.client.getMediaHandler().stopScreensharingStream(this.localScreenshareFeed!.stream);\n            this.removeScreenshareFeed(this.localScreenshareFeed!);\n            this.localScreenshareFeed = undefined;\n            this.localDesktopCapturerSourceId = undefined;\n            this.emit(GroupCallEvent.LocalScreenshareStateChanged, false, undefined, undefined);\n            return false;\n        }\n    }\n\n    public isScreensharing(): boolean {\n        return !!this.localScreenshareFeed;\n    }\n\n    /*\n     * Call Setup\n     *\n     * There are two different paths for calls to be created:\n     * 1. Incoming calls triggered by the Call.incoming event.\n     * 2. Outgoing calls to the initial members of a room or new members\n     *    as they are observed by the RoomState.members event.\n     */\n\n    private onIncomingCall = (newCall: MatrixCall): void => {\n        // The incoming calls may be for another room, which we will ignore.\n        if (newCall.roomId !== this.room.roomId) {\n            return;\n        }\n\n        if (newCall.state !== CallState.Ringing) {\n            logger.warn(\n                `GroupCall ${this.groupCallId} onIncomingCall() incoming call no longer in ringing state - ignoring`,\n            );\n            return;\n        }\n\n        if (!newCall.groupCallId || newCall.groupCallId !== this.groupCallId) {\n            logger.log(\n                `GroupCall ${this.groupCallId} onIncomingCall() ignored because it doesn't match the current group call`,\n            );\n            newCall.reject();\n            return;\n        }\n\n        const opponentUserId = newCall.getOpponentMember()?.userId;\n        if (opponentUserId === undefined) {\n            logger.warn(`GroupCall ${this.groupCallId} onIncomingCall() incoming call with no member - ignoring`);\n            return;\n        }\n\n        if (this.useLivekit) {\n            logger.info(\"Received incoming call whilst in signaling-only mode! Ignoring.\");\n            return;\n        }\n\n        const deviceMap = this.calls.get(opponentUserId) ?? new Map<string, MatrixCall>();\n        const prevCall = deviceMap.get(newCall.getOpponentDeviceId()!);\n\n        if (prevCall?.callId === newCall.callId) return;\n\n        logger.log(\n            `GroupCall ${this.groupCallId} onIncomingCall() incoming call (userId=${opponentUserId}, callId=${newCall.callId})`,\n        );\n\n        if (prevCall) prevCall.hangup(CallErrorCode.Replaced, false);\n        // We must do this before we start initialising / answering the call as we\n        // need to know it is the active call for this user+deviceId and to not ignore\n        // events from it.\n        deviceMap.set(newCall.getOpponentDeviceId()!, newCall);\n        this.calls.set(opponentUserId, deviceMap);\n\n        this.initCall(newCall);\n\n        const feeds = this.getLocalFeeds().map((feed) => feed.clone());\n        if (!this.callExpected(newCall)) {\n            // Disable our tracks for users not explicitly participating in the\n            // call but trying to receive the feeds\n            for (const feed of feeds) {\n                setTracksEnabled(feed.stream.getAudioTracks(), false);\n                setTracksEnabled(feed.stream.getVideoTracks(), false);\n            }\n        }\n        newCall.answerWithCallFeeds(feeds);\n\n        this.emit(GroupCallEvent.CallsChanged, this.calls);\n    };\n\n    /**\n     * Determines whether a given participant expects us to call them (versus\n     * them calling us).\n     * @param userId - The participant's user ID.\n     * @param deviceId - The participant's device ID.\n     * @returns Whether we need to place an outgoing call to the participant.\n     */\n    private wantsOutgoingCall(userId: string, deviceId: string): boolean {\n        const localUserId = this.client.getUserId()!;\n        const localDeviceId = this.client.getDeviceId()!;\n        return (\n            // If a user's ID is less than our own, they'll call us\n            userId >= localUserId &&\n            // If this is another one of our devices, compare device IDs to tell whether it'll call us\n            (userId !== localUserId || deviceId > localDeviceId)\n        );\n    }\n\n    /**\n     * Places calls to all participants that we're responsible for calling.\n     */\n    private placeOutgoingCalls(): void {\n        let callsChanged = false;\n\n        for (const [{ userId }, participantMap] of this.participants) {\n            const callMap = this.calls.get(userId) ?? new Map<string, MatrixCall>();\n\n            for (const [deviceId, participant] of participantMap) {\n                const prevCall = callMap.get(deviceId);\n\n                if (\n                    prevCall?.getOpponentSessionId() !== participant.sessionId &&\n                    this.wantsOutgoingCall(userId, deviceId)\n                ) {\n                    callsChanged = true;\n\n                    if (prevCall !== undefined) {\n                        logger.debug(\n                            `GroupCall ${this.groupCallId} placeOutgoingCalls() replacing call (userId=${userId}, deviceId=${deviceId}, callId=${prevCall.callId})`,\n                        );\n                        prevCall.hangup(CallErrorCode.NewSession, false);\n                    }\n\n                    const newCall = createNewMatrixCall(this.client, this.room.roomId, {\n                        invitee: userId,\n                        opponentDeviceId: deviceId,\n                        opponentSessionId: participant.sessionId,\n                        groupCallId: this.groupCallId,\n                    });\n\n                    if (newCall === null) {\n                        logger.error(\n                            `GroupCall ${this.groupCallId} placeOutgoingCalls() failed to create call (userId=${userId}, device=${deviceId})`,\n                        );\n                        callMap.delete(deviceId);\n                    } else {\n                        this.initCall(newCall);\n                        callMap.set(deviceId, newCall);\n\n                        logger.debug(\n                            `GroupCall ${this.groupCallId} placeOutgoingCalls() placing call (userId=${userId}, deviceId=${deviceId}, sessionId=${participant.sessionId})`,\n                        );\n\n                        newCall\n                            .placeCallWithCallFeeds(\n                                this.getLocalFeeds().map((feed) => feed.clone()),\n                                participant.screensharing,\n                            )\n                            .then(() => {\n                                if (this.dataChannelsEnabled) {\n                                    newCall.createDataChannel(\"datachannel\", this.dataChannelOptions);\n                                }\n                            })\n                            .catch((e) => {\n                                logger.warn(\n                                    `GroupCall ${this.groupCallId} placeOutgoingCalls() failed to place call (userId=${userId})`,\n                                    e,\n                                );\n\n                                if (e instanceof CallError && e.code === GroupCallErrorCode.UnknownDevice) {\n                                    this.emit(GroupCallEvent.Error, e);\n                                } else {\n                                    this.emit(\n                                        GroupCallEvent.Error,\n                                        new GroupCallError(\n                                            GroupCallErrorCode.PlaceCallFailed,\n                                            `Failed to place call to ${userId}`,\n                                        ),\n                                    );\n                                }\n\n                                newCall.hangup(CallErrorCode.SignallingFailed, false);\n                                if (callMap.get(deviceId) === newCall) callMap.delete(deviceId);\n                            });\n                    }\n                }\n            }\n\n            if (callMap.size > 0) {\n                this.calls.set(userId, callMap);\n            } else {\n                this.calls.delete(userId);\n            }\n        }\n\n        if (callsChanged) this.emit(GroupCallEvent.CallsChanged, this.calls);\n    }\n\n    /*\n     * Room Member State\n     */\n\n    private getMemberStateEvents(): MatrixEvent[];\n    private getMemberStateEvents(userId: string): MatrixEvent | null;\n    private getMemberStateEvents(userId?: string): MatrixEvent[] | MatrixEvent | null {\n        return userId === undefined\n            ? this.room.currentState.getStateEvents(EventType.GroupCallMemberPrefix)\n            : this.room.currentState.getStateEvents(EventType.GroupCallMemberPrefix, userId);\n    }\n\n    private onRetryCallLoop = (): void => {\n        let needsRetry = false;\n\n        for (const [{ userId }, participantMap] of this.participants) {\n            const callMap = this.calls.get(userId);\n            let retriesMap = this.retryCallCounts.get(userId);\n\n            for (const [deviceId, participant] of participantMap) {\n                const call = callMap?.get(deviceId);\n                const retries = retriesMap?.get(deviceId) ?? 0;\n\n                if (\n                    call?.getOpponentSessionId() !== participant.sessionId &&\n                    this.wantsOutgoingCall(userId, deviceId) &&\n                    retries < 3\n                ) {\n                    if (retriesMap === undefined) {\n                        retriesMap = new Map();\n                        this.retryCallCounts.set(userId, retriesMap);\n                    }\n                    retriesMap.set(deviceId, retries + 1);\n                    needsRetry = true;\n                }\n            }\n        }\n\n        if (needsRetry) this.placeOutgoingCalls();\n    };\n\n    private initCall(call: MatrixCall): void {\n        const opponentMemberId = getCallUserId(call);\n\n        if (!opponentMemberId) {\n            throw new Error(\"Cannot init call without user id\");\n        }\n\n        const onCallFeedsChanged = (): void => this.onCallFeedsChanged(call);\n        const onCallStateChanged = (state: CallState, oldState?: CallState): void =>\n            this.onCallStateChanged(call, state, oldState);\n        const onCallHangup = this.onCallHangup;\n        const onCallReplaced = (newCall: MatrixCall): void => this.onCallReplaced(call, newCall);\n\n        let deviceMap = this.callHandlers.get(opponentMemberId);\n        if (deviceMap === undefined) {\n            deviceMap = new Map();\n            this.callHandlers.set(opponentMemberId, deviceMap);\n        }\n\n        deviceMap.set(call.getOpponentDeviceId()!, {\n            onCallFeedsChanged,\n            onCallStateChanged,\n            onCallHangup,\n            onCallReplaced,\n        });\n\n        call.on(CallEvent.FeedsChanged, onCallFeedsChanged);\n        call.on(CallEvent.State, onCallStateChanged);\n        call.on(CallEvent.Hangup, onCallHangup);\n        call.on(CallEvent.Replaced, onCallReplaced);\n\n        call.isPtt = this.isPtt;\n\n        this.reEmitter.reEmit(call, Object.values(CallEvent));\n\n        call.initStats(this.getGroupCallStats());\n\n        onCallFeedsChanged();\n    }\n\n    private disposeCall(call: MatrixCall, hangupReason: CallErrorCode): void {\n        const opponentMemberId = getCallUserId(call);\n        const opponentDeviceId = call.getOpponentDeviceId()!;\n\n        if (!opponentMemberId) {\n            throw new Error(\"Cannot dispose call without user id\");\n        }\n\n        const deviceMap = this.callHandlers.get(opponentMemberId)!;\n        const { onCallFeedsChanged, onCallStateChanged, onCallHangup, onCallReplaced } =\n            deviceMap.get(opponentDeviceId)!;\n\n        call.removeListener(CallEvent.FeedsChanged, onCallFeedsChanged);\n        call.removeListener(CallEvent.State, onCallStateChanged);\n        call.removeListener(CallEvent.Hangup, onCallHangup);\n        call.removeListener(CallEvent.Replaced, onCallReplaced);\n\n        deviceMap.delete(opponentMemberId);\n        if (deviceMap.size === 0) this.callHandlers.delete(opponentMemberId);\n\n        if (call.hangupReason === CallErrorCode.Replaced) {\n            return;\n        }\n\n        const usermediaFeed = this.getUserMediaFeed(opponentMemberId, opponentDeviceId);\n\n        if (usermediaFeed) {\n            this.removeUserMediaFeed(usermediaFeed);\n        }\n\n        const screenshareFeed = this.getScreenshareFeed(opponentMemberId, opponentDeviceId);\n\n        if (screenshareFeed) {\n            this.removeScreenshareFeed(screenshareFeed);\n        }\n    }\n\n    private onCallFeedsChanged = (call: MatrixCall): void => {\n        const opponentMemberId = getCallUserId(call);\n        const opponentDeviceId = call.getOpponentDeviceId()!;\n\n        if (!opponentMemberId) {\n            throw new Error(\"Cannot change call feeds without user id\");\n        }\n\n        const currentUserMediaFeed = this.getUserMediaFeed(opponentMemberId, opponentDeviceId);\n        const remoteUsermediaFeed = call.remoteUsermediaFeed;\n        const remoteFeedChanged = remoteUsermediaFeed !== currentUserMediaFeed;\n\n        const deviceMap = this.calls.get(opponentMemberId);\n        const currentCallForUserDevice = deviceMap?.get(opponentDeviceId);\n        if (currentCallForUserDevice?.callId !== call.callId) {\n            // the call in question is not the current call for this user/deviceId\n            // so ignore feed events from it otherwise we'll remove our real feeds\n            return;\n        }\n\n        if (remoteFeedChanged) {\n            if (!currentUserMediaFeed && remoteUsermediaFeed) {\n                this.addUserMediaFeed(remoteUsermediaFeed);\n            } else if (currentUserMediaFeed && remoteUsermediaFeed) {\n                this.replaceUserMediaFeed(currentUserMediaFeed, remoteUsermediaFeed);\n            } else if (currentUserMediaFeed && !remoteUsermediaFeed) {\n                this.removeUserMediaFeed(currentUserMediaFeed);\n            }\n        }\n\n        const currentScreenshareFeed = this.getScreenshareFeed(opponentMemberId, opponentDeviceId);\n        const remoteScreensharingFeed = call.remoteScreensharingFeed;\n        const remoteScreenshareFeedChanged = remoteScreensharingFeed !== currentScreenshareFeed;\n\n        if (remoteScreenshareFeedChanged) {\n            if (!currentScreenshareFeed && remoteScreensharingFeed) {\n                this.addScreenshareFeed(remoteScreensharingFeed);\n            } else if (currentScreenshareFeed && remoteScreensharingFeed) {\n                this.replaceScreenshareFeed(currentScreenshareFeed, remoteScreensharingFeed);\n            } else if (currentScreenshareFeed && !remoteScreensharingFeed) {\n                this.removeScreenshareFeed(currentScreenshareFeed);\n            }\n        }\n    };\n\n    private onCallStateChanged = (call: MatrixCall, state: CallState, _oldState: CallState | undefined): void => {\n        if (state === CallState.Ended) return;\n\n        const audioMuted = this.localCallFeed!.isAudioMuted();\n\n        if (call.localUsermediaStream && call.isMicrophoneMuted() !== audioMuted) {\n            call.setMicrophoneMuted(audioMuted);\n        }\n\n        const videoMuted = this.localCallFeed!.isVideoMuted();\n\n        if (call.localUsermediaStream && call.isLocalVideoMuted() !== videoMuted) {\n            call.setLocalVideoMuted(videoMuted);\n        }\n\n        const opponentUserId = call.getOpponentMember()?.userId;\n        if (state === CallState.Connected && opponentUserId) {\n            const retriesMap = this.retryCallCounts.get(opponentUserId);\n            retriesMap?.delete(call.getOpponentDeviceId()!);\n            if (retriesMap?.size === 0) this.retryCallCounts.delete(opponentUserId);\n        }\n    };\n\n    private onCallHangup = (call: MatrixCall): void => {\n        if (call.hangupReason === CallErrorCode.Replaced) return;\n\n        const opponentUserId = call.getOpponentMember()?.userId ?? this.room.getMember(call.invitee!)!.userId;\n        const deviceMap = this.calls.get(opponentUserId);\n\n        // Sanity check that this call is in fact in the map\n        if (deviceMap?.get(call.getOpponentDeviceId()!) === call) {\n            this.disposeCall(call, call.hangupReason as CallErrorCode);\n            deviceMap.delete(call.getOpponentDeviceId()!);\n            if (deviceMap.size === 0) this.calls.delete(opponentUserId);\n            this.emit(GroupCallEvent.CallsChanged, this.calls);\n        }\n    };\n\n    private onCallReplaced = (prevCall: MatrixCall, newCall: MatrixCall): void => {\n        const opponentUserId = prevCall.getOpponentMember()!.userId;\n\n        let deviceMap = this.calls.get(opponentUserId);\n        if (deviceMap === undefined) {\n            deviceMap = new Map();\n            this.calls.set(opponentUserId, deviceMap);\n        }\n\n        prevCall.hangup(CallErrorCode.Replaced, false);\n        this.initCall(newCall);\n        deviceMap.set(prevCall.getOpponentDeviceId()!, newCall);\n        this.emit(GroupCallEvent.CallsChanged, this.calls);\n    };\n\n    /*\n     * UserMedia CallFeed Event Handlers\n     */\n\n    public getUserMediaFeed(userId: string, deviceId: string): CallFeed | undefined {\n        return this.userMediaFeeds.find((f) => f.userId === userId && f.deviceId! === deviceId);\n    }\n\n    private addUserMediaFeed(callFeed: CallFeed): void {\n        this.userMediaFeeds.push(callFeed);\n        callFeed.measureVolumeActivity(true);\n        this.emit(GroupCallEvent.UserMediaFeedsChanged, this.userMediaFeeds);\n    }\n\n    private replaceUserMediaFeed(existingFeed: CallFeed, replacementFeed: CallFeed): void {\n        const feedIndex = this.userMediaFeeds.findIndex(\n            (f) => f.userId === existingFeed.userId && f.deviceId! === existingFeed.deviceId,\n        );\n\n        if (feedIndex === -1) {\n            throw new Error(\"Couldn't find user media feed to replace\");\n        }\n\n        this.userMediaFeeds.splice(feedIndex, 1, replacementFeed);\n\n        existingFeed.dispose();\n        replacementFeed.measureVolumeActivity(true);\n        this.emit(GroupCallEvent.UserMediaFeedsChanged, this.userMediaFeeds);\n    }\n\n    private removeUserMediaFeed(callFeed: CallFeed): void {\n        const feedIndex = this.userMediaFeeds.findIndex(\n            (f) => f.userId === callFeed.userId && f.deviceId! === callFeed.deviceId,\n        );\n\n        if (feedIndex === -1) {\n            throw new Error(\"Couldn't find user media feed to remove\");\n        }\n\n        this.userMediaFeeds.splice(feedIndex, 1);\n\n        callFeed.dispose();\n        this.emit(GroupCallEvent.UserMediaFeedsChanged, this.userMediaFeeds);\n\n        if (this.activeSpeaker === callFeed) {\n            this.activeSpeaker = this.userMediaFeeds[0];\n            this.emit(GroupCallEvent.ActiveSpeakerChanged, this.activeSpeaker);\n        }\n    }\n\n    private onActiveSpeakerLoop = (): void => {\n        let topAvg: number | undefined = undefined;\n        let nextActiveSpeaker: CallFeed | undefined = undefined;\n\n        for (const callFeed of this.userMediaFeeds) {\n            if (callFeed.isLocal() && this.userMediaFeeds.length > 1) continue;\n\n            const total = callFeed.speakingVolumeSamples.reduce(\n                (acc, volume) => acc + Math.max(volume, SPEAKING_THRESHOLD),\n            );\n            const avg = total / callFeed.speakingVolumeSamples.length;\n\n            if (!topAvg || avg > topAvg) {\n                topAvg = avg;\n                nextActiveSpeaker = callFeed;\n            }\n        }\n\n        if (nextActiveSpeaker && this.activeSpeaker !== nextActiveSpeaker && topAvg && topAvg > SPEAKING_THRESHOLD) {\n            this.activeSpeaker = nextActiveSpeaker;\n            this.emit(GroupCallEvent.ActiveSpeakerChanged, this.activeSpeaker);\n        }\n    };\n\n    /*\n     * Screenshare Call Feed Event Handlers\n     */\n\n    public getScreenshareFeed(userId: string, deviceId: string): CallFeed | undefined {\n        return this.screenshareFeeds.find((f) => f.userId === userId && f.deviceId! === deviceId);\n    }\n\n    private addScreenshareFeed(callFeed: CallFeed): void {\n        this.screenshareFeeds.push(callFeed);\n        this.emit(GroupCallEvent.ScreenshareFeedsChanged, this.screenshareFeeds);\n    }\n\n    private replaceScreenshareFeed(existingFeed: CallFeed, replacementFeed: CallFeed): void {\n        const feedIndex = this.screenshareFeeds.findIndex(\n            (f) => f.userId === existingFeed.userId && f.deviceId! === existingFeed.deviceId,\n        );\n\n        if (feedIndex === -1) {\n            throw new Error(\"Couldn't find screenshare feed to replace\");\n        }\n\n        this.screenshareFeeds.splice(feedIndex, 1, replacementFeed);\n\n        existingFeed.dispose();\n        this.emit(GroupCallEvent.ScreenshareFeedsChanged, this.screenshareFeeds);\n    }\n\n    private removeScreenshareFeed(callFeed: CallFeed): void {\n        const feedIndex = this.screenshareFeeds.findIndex(\n            (f) => f.userId === callFeed.userId && f.deviceId! === callFeed.deviceId,\n        );\n\n        if (feedIndex === -1) {\n            throw new Error(\"Couldn't find screenshare feed to remove\");\n        }\n\n        this.screenshareFeeds.splice(feedIndex, 1);\n\n        callFeed.dispose();\n        this.emit(GroupCallEvent.ScreenshareFeedsChanged, this.screenshareFeeds);\n    }\n\n    /**\n     * Recalculates and updates the participant map to match the room state.\n     */\n    private updateParticipants(): void {\n        const localMember = this.room.getMember(this.client.getUserId()!)!;\n        if (!localMember) {\n            // The client hasn't fetched enough of the room state to get our own member\n            // event. This probably shouldn't happen, but sanity check & exit for now.\n            logger.warn(\n                `GroupCall ${this.groupCallId} updateParticipants() tried to update participants before local room member is available`,\n            );\n            return;\n        }\n\n        if (this.participantsExpirationTimer !== null) {\n            clearTimeout(this.participantsExpirationTimer);\n            this.participantsExpirationTimer = null;\n        }\n\n        if (this.state === GroupCallState.Ended) {\n            this.participants = new Map();\n            return;\n        }\n\n        const participants = new Map<RoomMember, Map<string, ParticipantState>>();\n        const now = Date.now();\n        const entered = this.state === GroupCallState.Entered || this.enteredViaAnotherSession;\n        let nextExpiration = Infinity;\n\n        for (const e of this.getMemberStateEvents()) {\n            const member = this.room.getMember(e.getStateKey()!);\n            const content = e.getContent<Record<any, unknown>>();\n            const calls: Record<any, unknown>[] = Array.isArray(content[\"m.calls\"]) ? content[\"m.calls\"] : [];\n            const call = calls.find((call) => call[\"m.call_id\"] === this.groupCallId);\n            const devices: Record<any, unknown>[] = Array.isArray(call?.[\"m.devices\"]) ? call![\"m.devices\"] : [];\n\n            // Filter out invalid and expired devices\n            let validDevices = devices.filter(\n                (d) =>\n                    typeof d.device_id === \"string\" &&\n                    typeof d.session_id === \"string\" &&\n                    typeof d.expires_ts === \"number\" &&\n                    d.expires_ts > now &&\n                    Array.isArray(d.feeds),\n            ) as unknown as IGroupCallRoomMemberDevice[];\n\n            // Apply local echo for the unentered case\n            if (!entered && member?.userId === this.client.getUserId()!) {\n                validDevices = validDevices.filter((d) => d.device_id !== this.client.getDeviceId()!);\n            }\n\n            // Must have a connected device and be joined to the room\n            if (validDevices.length > 0 && member?.membership === \"join\") {\n                const deviceMap = new Map<string, ParticipantState>();\n                participants.set(member, deviceMap);\n\n                for (const d of validDevices) {\n                    deviceMap.set(d.device_id, {\n                        sessionId: d.session_id,\n                        screensharing: d.feeds.some((f) => f.purpose === SDPStreamMetadataPurpose.Screenshare),\n                    });\n                    if (d.expires_ts < nextExpiration) nextExpiration = d.expires_ts;\n                }\n            }\n        }\n\n        // Apply local echo for the entered case\n        if (entered) {\n            let deviceMap = participants.get(localMember);\n            if (deviceMap === undefined) {\n                deviceMap = new Map();\n                participants.set(localMember, deviceMap);\n            }\n\n            if (!deviceMap.has(this.client.getDeviceId()!)) {\n                deviceMap.set(this.client.getDeviceId()!, {\n                    sessionId: this.client.getSessionId(),\n                    screensharing: this.getLocalFeeds().some((f) => f.purpose === SDPStreamMetadataPurpose.Screenshare),\n                });\n            }\n        }\n\n        this.participants = participants;\n        if (nextExpiration < Infinity) {\n            this.participantsExpirationTimer = setTimeout(() => this.updateParticipants(), nextExpiration - now);\n        }\n    }\n\n    /**\n     * Updates the local user's member state with the devices returned by the given function.\n     * @param fn - A function from the current devices to the new devices. If it\n     *   returns null, the update will be skipped.\n     * @param keepAlive - Whether the request should outlive the window.\n     */\n    private async updateDevices(\n        fn: (devices: IGroupCallRoomMemberDevice[]) => IGroupCallRoomMemberDevice[] | null,\n        keepAlive = false,\n    ): Promise<void> {\n        const now = Date.now();\n        const localUserId = this.client.getUserId()!;\n\n        const event = this.getMemberStateEvents(localUserId);\n        const content = event?.getContent<Record<any, unknown>>() ?? {};\n        const calls: Record<any, unknown>[] = Array.isArray(content[\"m.calls\"]) ? content[\"m.calls\"] : [];\n\n        let call: Record<any, unknown> | null = null;\n        const otherCalls: Record<any, unknown>[] = [];\n        for (const c of calls) {\n            if (c[\"m.call_id\"] === this.groupCallId) {\n                call = c;\n            } else {\n                otherCalls.push(c);\n            }\n        }\n        if (call === null) call = {};\n\n        const devices: Record<any, unknown>[] = Array.isArray(call[\"m.devices\"]) ? call[\"m.devices\"] : [];\n\n        // Filter out invalid and expired devices\n        const validDevices = devices.filter(\n            (d) =>\n                typeof d.device_id === \"string\" &&\n                typeof d.session_id === \"string\" &&\n                typeof d.expires_ts === \"number\" &&\n                d.expires_ts > now &&\n                Array.isArray(d.feeds),\n        ) as unknown as IGroupCallRoomMemberDevice[];\n\n        const newDevices = fn(validDevices);\n        if (newDevices === null) return;\n\n        const newCalls = [...(otherCalls as unknown as IGroupCallRoomMemberCallState[])];\n        if (newDevices.length > 0) {\n            newCalls.push({\n                ...call,\n                \"m.call_id\": this.groupCallId,\n                \"m.devices\": newDevices,\n            });\n        }\n\n        const newContent: IGroupCallRoomMemberState = { \"m.calls\": newCalls };\n\n        await this.client.sendStateEvent(this.room.roomId, EventType.GroupCallMemberPrefix, newContent, localUserId, {\n            keepAlive,\n        });\n    }\n\n    private async addDeviceToMemberState(): Promise<void> {\n        await this.updateDevices((devices) => [\n            ...devices.filter((d) => d.device_id !== this.client.getDeviceId()!),\n            {\n                device_id: this.client.getDeviceId()!,\n                session_id: this.client.getSessionId(),\n                expires_ts: Date.now() + DEVICE_TIMEOUT,\n                feeds: this.getLocalFeeds().map((feed) => ({ purpose: feed.purpose })),\n                // TODO: Add data channels\n            },\n        ]);\n    }\n\n    private async updateMemberState(): Promise<void> {\n        // Clear the old update interval before proceeding\n        if (this.resendMemberStateTimer !== null) {\n            clearInterval(this.resendMemberStateTimer);\n            this.resendMemberStateTimer = null;\n        }\n\n        if (this.state === GroupCallState.Entered) {\n            // Add the local device\n            await this.addDeviceToMemberState();\n\n            // Resend the state event every so often so it doesn't become stale\n            this.resendMemberStateTimer = setInterval(async () => {\n                logger.log(`GroupCall ${this.groupCallId} updateMemberState() resending call member state\"`);\n                try {\n                    await this.addDeviceToMemberState();\n                } catch (e) {\n                    logger.error(\n                        `GroupCall ${this.groupCallId} updateMemberState() failed to resend call member state`,\n                        e,\n                    );\n                }\n            }, (DEVICE_TIMEOUT * 3) / 4);\n        } else {\n            // Remove the local device\n            await this.updateDevices(\n                (devices) => devices.filter((d) => d.device_id !== this.client.getDeviceId()!),\n                true,\n            );\n        }\n    }\n\n    /**\n     * Cleans up our member state by filtering out logged out devices, inactive\n     * devices, and our own device (if we know we haven't entered).\n     */\n    public async cleanMemberState(): Promise<void> {\n        const { devices: myDevices } = await this.client.getDevices();\n        const deviceMap = new Map<string, IMyDevice>(myDevices.map((d) => [d.device_id, d]));\n\n        // updateDevices takes care of filtering out inactive devices for us\n        await this.updateDevices((devices) => {\n            const newDevices = devices.filter((d) => {\n                const device = deviceMap.get(d.device_id);\n                return (\n                    device?.last_seen_ts !== undefined &&\n                    !(\n                        d.device_id === this.client.getDeviceId()! &&\n                        this.state !== GroupCallState.Entered &&\n                        !this.enteredViaAnotherSession\n                    )\n                );\n            });\n\n            // Skip the update if the devices are unchanged\n            return newDevices.length === devices.length ? null : newDevices;\n        });\n    }\n\n    private onRoomState = (): void => this.updateParticipants();\n\n    private onParticipantsChanged = (): void => {\n        // Re-run setTracksEnabled on all calls, so that participants that just\n        // left get denied access to our media, and participants that just\n        // joined get granted access\n        this.forEachCall((call) => {\n            const expected = this.callExpected(call);\n            for (const feed of call.getLocalFeeds()) {\n                setTracksEnabled(feed.stream.getAudioTracks(), !feed.isAudioMuted() && expected);\n                setTracksEnabled(feed.stream.getVideoTracks(), !feed.isVideoMuted() && expected);\n            }\n        });\n\n        if (this.state === GroupCallState.Entered && !this.useLivekit) this.placeOutgoingCalls();\n\n        // Update the participants stored in the stats object\n    };\n\n    private onStateChanged = (newState: GroupCallState, oldState: GroupCallState): void => {\n        if (\n            newState === GroupCallState.Entered ||\n            oldState === GroupCallState.Entered ||\n            newState === GroupCallState.Ended\n        ) {\n            // We either entered, left, or ended the call\n            this.updateParticipants();\n            this.updateMemberState().catch((e) =>\n                logger.error(\n                    `GroupCall ${this.groupCallId} onStateChanged() failed to update member state devices\"`,\n                    e,\n                ),\n            );\n        }\n    };\n\n    private onLocalFeedsChanged = (): void => {\n        if (this.state === GroupCallState.Entered) {\n            this.updateMemberState().catch((e) =>\n                logger.error(\n                    `GroupCall ${this.groupCallId} onLocalFeedsChanged() failed to update member state feeds`,\n                    e,\n                ),\n            );\n        }\n    };\n\n    public getGroupCallStats(): GroupCallStats {\n        if (this.stats === undefined) {\n            const userID = this.client.getUserId() || \"unknown\";\n            this.stats = new GroupCallStats(this.groupCallId, userID, this.statsCollectIntervalTime);\n            this.stats.reports.on(StatsReport.CONNECTION_STATS, this.onConnectionStats);\n            this.stats.reports.on(StatsReport.BYTE_SENT_STATS, this.onByteSentStats);\n            this.stats.reports.on(StatsReport.SUMMARY_STATS, this.onSummaryStats);\n            this.stats.reports.on(StatsReport.CALL_FEED_REPORT, this.onCallFeedReport);\n        }\n        return this.stats;\n    }\n\n    public setGroupCallStatsInterval(interval: number): void {\n        this.statsCollectIntervalTime = interval;\n        if (this.stats !== undefined) {\n            this.stats.stop();\n            this.stats.setInterval(interval);\n            if (interval > 0) {\n                this.stats.start();\n            }\n        }\n    }\n}\n"],"mappings":"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"}